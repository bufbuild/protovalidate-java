// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: buf/validate/conformance/harness/results.proto
// Protobuf Java Version: 4.30.1

package build.buf.validate.conformance.harness;

public interface ResultOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:buf.validate.conformance.harness.ResultOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The suite filter is a regex that matches against the suite name.
   * </pre>
   *
   * <code>string suite_filter = 1 [json_name = "suiteFilter"];</code>
   * @return The suiteFilter.
   */
  java.lang.String getSuiteFilter();
  /**
   * <pre>
   * The suite filter is a regex that matches against the suite name.
   * </pre>
   *
   * <code>string suite_filter = 1 [json_name = "suiteFilter"];</code>
   * @return The bytes for suiteFilter.
   */
  com.google.protobuf.ByteString
      getSuiteFilterBytes();

  /**
   * <pre>
   * The case filter is a regex that matches against the case name.
   * </pre>
   *
   * <code>string case_filter = 2 [json_name = "caseFilter"];</code>
   * @return The caseFilter.
   */
  java.lang.String getCaseFilter();
  /**
   * <pre>
   * The case filter is a regex that matches against the case name.
   * </pre>
   *
   * <code>string case_filter = 2 [json_name = "caseFilter"];</code>
   * @return The bytes for caseFilter.
   */
  com.google.protobuf.ByteString
      getCaseFilterBytes();

  /**
   * <pre>
   * If the test runner should print verbose output.
   * </pre>
   *
   * <code>bool verbose = 3 [json_name = "verbose"];</code>
   * @return The verbose.
   */
  boolean getVerbose();

  /**
   * <pre>
   * If the violation type must be an exact match.
   * </pre>
   *
   * <code>bool strict = 4 [json_name = "strict"];</code>
   * @return The strict.
   */
  boolean getStrict();

  /**
   * <pre>
   * If the violation message must be an exact match.
   * </pre>
   *
   * <code>bool strict_message = 5 [json_name = "strictMessage"];</code>
   * @return The strictMessage.
   */
  boolean getStrictMessage();

  /**
   * <pre>
   * If the distinction between runtime and compile time errors must be exact.
   * </pre>
   *
   * <code>bool strict_error = 6 [json_name = "strictError"];</code>
   * @return The strictError.
   */
  boolean getStrictError();
}
