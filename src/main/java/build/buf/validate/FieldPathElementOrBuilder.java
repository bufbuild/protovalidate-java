// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: buf/validate/validate.proto
// Protobuf Java Version: 4.30.1

package build.buf.validate;

public interface FieldPathElementOrBuilder extends
    // @@protoc_insertion_point(interface_extends:buf.validate.FieldPathElement)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * `field_number` is the field number this path element refers to.
   * </pre>
   *
   * <code>optional int32 field_number = 1 [json_name = "fieldNumber"];</code>
   * @return Whether the fieldNumber field is set.
   */
  boolean hasFieldNumber();
  /**
   * <pre>
   * `field_number` is the field number this path element refers to.
   * </pre>
   *
   * <code>optional int32 field_number = 1 [json_name = "fieldNumber"];</code>
   * @return The fieldNumber.
   */
  int getFieldNumber();

  /**
   * <pre>
   * `field_name` contains the field name this path element refers to.
   * This can be used to display a human-readable path even if the field number is unknown.
   * </pre>
   *
   * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
   * @return Whether the fieldName field is set.
   */
  boolean hasFieldName();
  /**
   * <pre>
   * `field_name` contains the field name this path element refers to.
   * This can be used to display a human-readable path even if the field number is unknown.
   * </pre>
   *
   * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
   * @return The fieldName.
   */
  java.lang.String getFieldName();
  /**
   * <pre>
   * `field_name` contains the field name this path element refers to.
   * This can be used to display a human-readable path even if the field number is unknown.
   * </pre>
   *
   * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
   * @return The bytes for fieldName.
   */
  com.google.protobuf.ByteString
      getFieldNameBytes();

  /**
   * <pre>
   * `field_type` specifies the type of this field. When using reflection, this value is not needed.
   *
   * This value is provided to make it possible to traverse unknown fields through wire data.
   * When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
   *
   * [1]: https://protobuf.dev/programming-guides/encoding/#packed
   * [2]: https://protobuf.dev/programming-guides/encoding/#groups
   *
   * N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
   * can be explicitly used in Protocol Buffers 2023 Edition.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type field_type = 3 [json_name = "fieldType"];</code>
   * @return Whether the fieldType field is set.
   */
  boolean hasFieldType();
  /**
   * <pre>
   * `field_type` specifies the type of this field. When using reflection, this value is not needed.
   *
   * This value is provided to make it possible to traverse unknown fields through wire data.
   * When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
   *
   * [1]: https://protobuf.dev/programming-guides/encoding/#packed
   * [2]: https://protobuf.dev/programming-guides/encoding/#groups
   *
   * N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
   * can be explicitly used in Protocol Buffers 2023 Edition.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type field_type = 3 [json_name = "fieldType"];</code>
   * @return The fieldType.
   */
  com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getFieldType();

  /**
   * <pre>
   * `key_type` specifies the map key type of this field. This value is useful when traversing
   * unknown fields through wire data: specifically, it allows handling the differences between
   * different integer encodings.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type key_type = 4 [json_name = "keyType"];</code>
   * @return Whether the keyType field is set.
   */
  boolean hasKeyType();
  /**
   * <pre>
   * `key_type` specifies the map key type of this field. This value is useful when traversing
   * unknown fields through wire data: specifically, it allows handling the differences between
   * different integer encodings.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type key_type = 4 [json_name = "keyType"];</code>
   * @return The keyType.
   */
  com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getKeyType();

  /**
   * <pre>
   * `value_type` specifies map value type of this field. This is useful if you want to display a
   * value inside unknown fields through wire data.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type value_type = 5 [json_name = "valueType"];</code>
   * @return Whether the valueType field is set.
   */
  boolean hasValueType();
  /**
   * <pre>
   * `value_type` specifies map value type of this field. This is useful if you want to display a
   * value inside unknown fields through wire data.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type value_type = 5 [json_name = "valueType"];</code>
   * @return The valueType.
   */
  com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getValueType();

  /**
   * <pre>
   * `index` specifies a 0-based index into a repeated field.
   * </pre>
   *
   * <code>uint64 index = 6 [json_name = "index"];</code>
   * @return Whether the index field is set.
   */
  boolean hasIndex();
  /**
   * <pre>
   * `index` specifies a 0-based index into a repeated field.
   * </pre>
   *
   * <code>uint64 index = 6 [json_name = "index"];</code>
   * @return The index.
   */
  long getIndex();

  /**
   * <pre>
   * `bool_key` specifies a map key of type bool.
   * </pre>
   *
   * <code>bool bool_key = 7 [json_name = "boolKey"];</code>
   * @return Whether the boolKey field is set.
   */
  boolean hasBoolKey();
  /**
   * <pre>
   * `bool_key` specifies a map key of type bool.
   * </pre>
   *
   * <code>bool bool_key = 7 [json_name = "boolKey"];</code>
   * @return The boolKey.
   */
  boolean getBoolKey();

  /**
   * <pre>
   * `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
   * </pre>
   *
   * <code>int64 int_key = 8 [json_name = "intKey"];</code>
   * @return Whether the intKey field is set.
   */
  boolean hasIntKey();
  /**
   * <pre>
   * `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
   * </pre>
   *
   * <code>int64 int_key = 8 [json_name = "intKey"];</code>
   * @return The intKey.
   */
  long getIntKey();

  /**
   * <pre>
   * `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
   * </pre>
   *
   * <code>uint64 uint_key = 9 [json_name = "uintKey"];</code>
   * @return Whether the uintKey field is set.
   */
  boolean hasUintKey();
  /**
   * <pre>
   * `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
   * </pre>
   *
   * <code>uint64 uint_key = 9 [json_name = "uintKey"];</code>
   * @return The uintKey.
   */
  long getUintKey();

  /**
   * <pre>
   * `string_key` specifies a map key of type string.
   * </pre>
   *
   * <code>string string_key = 10 [json_name = "stringKey"];</code>
   * @return Whether the stringKey field is set.
   */
  boolean hasStringKey();
  /**
   * <pre>
   * `string_key` specifies a map key of type string.
   * </pre>
   *
   * <code>string string_key = 10 [json_name = "stringKey"];</code>
   * @return The stringKey.
   */
  java.lang.String getStringKey();
  /**
   * <pre>
   * `string_key` specifies a map key of type string.
   * </pre>
   *
   * <code>string string_key = 10 [json_name = "stringKey"];</code>
   * @return The bytes for stringKey.
   */
  com.google.protobuf.ByteString
      getStringKeyBytes();

  build.buf.validate.FieldPathElement.SubscriptCase getSubscriptCase();
}
