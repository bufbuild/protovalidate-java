// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: buf/validate/validate.proto
// Protobuf Java Version: 4.30.1

package build.buf.validate;

/**
 * <pre>
 * `FieldPathElement` provides enough information to nest through a single protobuf field.
 *
 * If the selected field is a map or repeated field, the `subscript` value selects a specific element from it.
 * A path that refers to a value nested under a map key or repeated field index will have a `subscript` value.
 * The `field_type` field allows unambiguous resolution of a field even if descriptors are not available.
 * </pre>
 *
 * Protobuf type {@code buf.validate.FieldPathElement}
 */
public final class FieldPathElement extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:buf.validate.FieldPathElement)
    FieldPathElementOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 30,
      /* patch= */ 1,
      /* suffix= */ "",
      FieldPathElement.class.getName());
  }
  // Use FieldPathElement.newBuilder() to construct.
  private FieldPathElement(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private FieldPathElement() {
    fieldName_ = "";
    fieldType_ = 1;
    keyType_ = 1;
    valueType_ = 1;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return build.buf.validate.ValidateProto.internal_static_buf_validate_FieldPathElement_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return build.buf.validate.ValidateProto.internal_static_buf_validate_FieldPathElement_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            build.buf.validate.FieldPathElement.class, build.buf.validate.FieldPathElement.Builder.class);
  }

  private int bitField0_;
  private int subscriptCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object subscript_;
  public enum SubscriptCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    INDEX(6),
    BOOL_KEY(7),
    INT_KEY(8),
    UINT_KEY(9),
    STRING_KEY(10),
    SUBSCRIPT_NOT_SET(0);
    private final int value;
    private SubscriptCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SubscriptCase valueOf(int value) {
      return forNumber(value);
    }

    public static SubscriptCase forNumber(int value) {
      switch (value) {
        case 6: return INDEX;
        case 7: return BOOL_KEY;
        case 8: return INT_KEY;
        case 9: return UINT_KEY;
        case 10: return STRING_KEY;
        case 0: return SUBSCRIPT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SubscriptCase
  getSubscriptCase() {
    return SubscriptCase.forNumber(
        subscriptCase_);
  }

  public static final int FIELD_NUMBER_FIELD_NUMBER = 1;
  private int fieldNumber_ = 0;
  /**
   * <pre>
   * `field_number` is the field number this path element refers to.
   * </pre>
   *
   * <code>optional int32 field_number = 1 [json_name = "fieldNumber"];</code>
   * @return Whether the fieldNumber field is set.
   */
  @java.lang.Override
  public boolean hasFieldNumber() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * `field_number` is the field number this path element refers to.
   * </pre>
   *
   * <code>optional int32 field_number = 1 [json_name = "fieldNumber"];</code>
   * @return The fieldNumber.
   */
  @java.lang.Override
  public int getFieldNumber() {
    return fieldNumber_;
  }

  public static final int FIELD_NAME_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object fieldName_ = "";
  /**
   * <pre>
   * `field_name` contains the field name this path element refers to.
   * This can be used to display a human-readable path even if the field number is unknown.
   * </pre>
   *
   * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
   * @return Whether the fieldName field is set.
   */
  @java.lang.Override
  public boolean hasFieldName() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * `field_name` contains the field name this path element refers to.
   * This can be used to display a human-readable path even if the field number is unknown.
   * </pre>
   *
   * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
   * @return The fieldName.
   */
  @java.lang.Override
  public java.lang.String getFieldName() {
    java.lang.Object ref = fieldName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        fieldName_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * `field_name` contains the field name this path element refers to.
   * This can be used to display a human-readable path even if the field number is unknown.
   * </pre>
   *
   * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
   * @return The bytes for fieldName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getFieldNameBytes() {
    java.lang.Object ref = fieldName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      fieldName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FIELD_TYPE_FIELD_NUMBER = 3;
  private int fieldType_ = 1;
  /**
   * <pre>
   * `field_type` specifies the type of this field. When using reflection, this value is not needed.
   *
   * This value is provided to make it possible to traverse unknown fields through wire data.
   * When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
   *
   * [1]: https://protobuf.dev/programming-guides/encoding/#packed
   * [2]: https://protobuf.dev/programming-guides/encoding/#groups
   *
   * N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
   * can be explicitly used in Protocol Buffers 2023 Edition.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type field_type = 3 [json_name = "fieldType"];</code>
   * @return Whether the fieldType field is set.
   */
  @java.lang.Override public boolean hasFieldType() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * `field_type` specifies the type of this field. When using reflection, this value is not needed.
   *
   * This value is provided to make it possible to traverse unknown fields through wire data.
   * When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
   *
   * [1]: https://protobuf.dev/programming-guides/encoding/#packed
   * [2]: https://protobuf.dev/programming-guides/encoding/#groups
   *
   * N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
   * can be explicitly used in Protocol Buffers 2023 Edition.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type field_type = 3 [json_name = "fieldType"];</code>
   * @return The fieldType.
   */
  @java.lang.Override public com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getFieldType() {
    com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type result = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(fieldType_);
    return result == null ? com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE : result;
  }

  public static final int KEY_TYPE_FIELD_NUMBER = 4;
  private int keyType_ = 1;
  /**
   * <pre>
   * `key_type` specifies the map key type of this field. This value is useful when traversing
   * unknown fields through wire data: specifically, it allows handling the differences between
   * different integer encodings.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type key_type = 4 [json_name = "keyType"];</code>
   * @return Whether the keyType field is set.
   */
  @java.lang.Override public boolean hasKeyType() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * `key_type` specifies the map key type of this field. This value is useful when traversing
   * unknown fields through wire data: specifically, it allows handling the differences between
   * different integer encodings.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type key_type = 4 [json_name = "keyType"];</code>
   * @return The keyType.
   */
  @java.lang.Override public com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getKeyType() {
    com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type result = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(keyType_);
    return result == null ? com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE : result;
  }

  public static final int VALUE_TYPE_FIELD_NUMBER = 5;
  private int valueType_ = 1;
  /**
   * <pre>
   * `value_type` specifies map value type of this field. This is useful if you want to display a
   * value inside unknown fields through wire data.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type value_type = 5 [json_name = "valueType"];</code>
   * @return Whether the valueType field is set.
   */
  @java.lang.Override public boolean hasValueType() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * `value_type` specifies map value type of this field. This is useful if you want to display a
   * value inside unknown fields through wire data.
   * </pre>
   *
   * <code>optional .google.protobuf.FieldDescriptorProto.Type value_type = 5 [json_name = "valueType"];</code>
   * @return The valueType.
   */
  @java.lang.Override public com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getValueType() {
    com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type result = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(valueType_);
    return result == null ? com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE : result;
  }

  public static final int INDEX_FIELD_NUMBER = 6;
  /**
   * <pre>
   * `index` specifies a 0-based index into a repeated field.
   * </pre>
   *
   * <code>uint64 index = 6 [json_name = "index"];</code>
   * @return Whether the index field is set.
   */
  @java.lang.Override
  public boolean hasIndex() {
    return subscriptCase_ == 6;
  }
  /**
   * <pre>
   * `index` specifies a 0-based index into a repeated field.
   * </pre>
   *
   * <code>uint64 index = 6 [json_name = "index"];</code>
   * @return The index.
   */
  @java.lang.Override
  public long getIndex() {
    if (subscriptCase_ == 6) {
      return (java.lang.Long) subscript_;
    }
    return 0L;
  }

  public static final int BOOL_KEY_FIELD_NUMBER = 7;
  /**
   * <pre>
   * `bool_key` specifies a map key of type bool.
   * </pre>
   *
   * <code>bool bool_key = 7 [json_name = "boolKey"];</code>
   * @return Whether the boolKey field is set.
   */
  @java.lang.Override
  public boolean hasBoolKey() {
    return subscriptCase_ == 7;
  }
  /**
   * <pre>
   * `bool_key` specifies a map key of type bool.
   * </pre>
   *
   * <code>bool bool_key = 7 [json_name = "boolKey"];</code>
   * @return The boolKey.
   */
  @java.lang.Override
  public boolean getBoolKey() {
    if (subscriptCase_ == 7) {
      return (java.lang.Boolean) subscript_;
    }
    return false;
  }

  public static final int INT_KEY_FIELD_NUMBER = 8;
  /**
   * <pre>
   * `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
   * </pre>
   *
   * <code>int64 int_key = 8 [json_name = "intKey"];</code>
   * @return Whether the intKey field is set.
   */
  @java.lang.Override
  public boolean hasIntKey() {
    return subscriptCase_ == 8;
  }
  /**
   * <pre>
   * `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
   * </pre>
   *
   * <code>int64 int_key = 8 [json_name = "intKey"];</code>
   * @return The intKey.
   */
  @java.lang.Override
  public long getIntKey() {
    if (subscriptCase_ == 8) {
      return (java.lang.Long) subscript_;
    }
    return 0L;
  }

  public static final int UINT_KEY_FIELD_NUMBER = 9;
  /**
   * <pre>
   * `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
   * </pre>
   *
   * <code>uint64 uint_key = 9 [json_name = "uintKey"];</code>
   * @return Whether the uintKey field is set.
   */
  @java.lang.Override
  public boolean hasUintKey() {
    return subscriptCase_ == 9;
  }
  /**
   * <pre>
   * `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
   * </pre>
   *
   * <code>uint64 uint_key = 9 [json_name = "uintKey"];</code>
   * @return The uintKey.
   */
  @java.lang.Override
  public long getUintKey() {
    if (subscriptCase_ == 9) {
      return (java.lang.Long) subscript_;
    }
    return 0L;
  }

  public static final int STRING_KEY_FIELD_NUMBER = 10;
  /**
   * <pre>
   * `string_key` specifies a map key of type string.
   * </pre>
   *
   * <code>string string_key = 10 [json_name = "stringKey"];</code>
   * @return Whether the stringKey field is set.
   */
  public boolean hasStringKey() {
    return subscriptCase_ == 10;
  }
  /**
   * <pre>
   * `string_key` specifies a map key of type string.
   * </pre>
   *
   * <code>string string_key = 10 [json_name = "stringKey"];</code>
   * @return The stringKey.
   */
  public java.lang.String getStringKey() {
    java.lang.Object ref = "";
    if (subscriptCase_ == 10) {
      ref = subscript_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8() && (subscriptCase_ == 10)) {
        subscript_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * `string_key` specifies a map key of type string.
   * </pre>
   *
   * <code>string string_key = 10 [json_name = "stringKey"];</code>
   * @return The bytes for stringKey.
   */
  public com.google.protobuf.ByteString
      getStringKeyBytes() {
    java.lang.Object ref = "";
    if (subscriptCase_ == 10) {
      ref = subscript_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (subscriptCase_ == 10) {
        subscript_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt32(1, fieldNumber_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 2, fieldName_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeEnum(3, fieldType_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeEnum(4, keyType_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeEnum(5, valueType_);
    }
    if (subscriptCase_ == 6) {
      output.writeUInt64(
          6, (long)((java.lang.Long) subscript_));
    }
    if (subscriptCase_ == 7) {
      output.writeBool(
          7, (boolean)((java.lang.Boolean) subscript_));
    }
    if (subscriptCase_ == 8) {
      output.writeInt64(
          8, (long)((java.lang.Long) subscript_));
    }
    if (subscriptCase_ == 9) {
      output.writeUInt64(
          9, (long)((java.lang.Long) subscript_));
    }
    if (subscriptCase_ == 10) {
      com.google.protobuf.GeneratedMessage.writeString(output, 10, subscript_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, fieldNumber_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(2, fieldName_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, fieldType_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, keyType_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, valueType_);
    }
    if (subscriptCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(
            6, (long)((java.lang.Long) subscript_));
    }
    if (subscriptCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            7, (boolean)((java.lang.Boolean) subscript_));
    }
    if (subscriptCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(
            8, (long)((java.lang.Long) subscript_));
    }
    if (subscriptCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(
            9, (long)((java.lang.Long) subscript_));
    }
    if (subscriptCase_ == 10) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(10, subscript_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof build.buf.validate.FieldPathElement)) {
      return super.equals(obj);
    }
    build.buf.validate.FieldPathElement other = (build.buf.validate.FieldPathElement) obj;

    if (hasFieldNumber() != other.hasFieldNumber()) return false;
    if (hasFieldNumber()) {
      if (getFieldNumber()
          != other.getFieldNumber()) return false;
    }
    if (hasFieldName() != other.hasFieldName()) return false;
    if (hasFieldName()) {
      if (!getFieldName()
          .equals(other.getFieldName())) return false;
    }
    if (hasFieldType() != other.hasFieldType()) return false;
    if (hasFieldType()) {
      if (fieldType_ != other.fieldType_) return false;
    }
    if (hasKeyType() != other.hasKeyType()) return false;
    if (hasKeyType()) {
      if (keyType_ != other.keyType_) return false;
    }
    if (hasValueType() != other.hasValueType()) return false;
    if (hasValueType()) {
      if (valueType_ != other.valueType_) return false;
    }
    if (!getSubscriptCase().equals(other.getSubscriptCase())) return false;
    switch (subscriptCase_) {
      case 6:
        if (getIndex()
            != other.getIndex()) return false;
        break;
      case 7:
        if (getBoolKey()
            != other.getBoolKey()) return false;
        break;
      case 8:
        if (getIntKey()
            != other.getIntKey()) return false;
        break;
      case 9:
        if (getUintKey()
            != other.getUintKey()) return false;
        break;
      case 10:
        if (!getStringKey()
            .equals(other.getStringKey())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasFieldNumber()) {
      hash = (37 * hash) + FIELD_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + getFieldNumber();
    }
    if (hasFieldName()) {
      hash = (37 * hash) + FIELD_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getFieldName().hashCode();
    }
    if (hasFieldType()) {
      hash = (37 * hash) + FIELD_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + fieldType_;
    }
    if (hasKeyType()) {
      hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + keyType_;
    }
    if (hasValueType()) {
      hash = (37 * hash) + VALUE_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + valueType_;
    }
    switch (subscriptCase_) {
      case 6:
        hash = (37 * hash) + INDEX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getIndex());
        break;
      case 7:
        hash = (37 * hash) + BOOL_KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBoolKey());
        break;
      case 8:
        hash = (37 * hash) + INT_KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getIntKey());
        break;
      case 9:
        hash = (37 * hash) + UINT_KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getUintKey());
        break;
      case 10:
        hash = (37 * hash) + STRING_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getStringKey().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static build.buf.validate.FieldPathElement parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.buf.validate.FieldPathElement parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.buf.validate.FieldPathElement parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.buf.validate.FieldPathElement parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.buf.validate.FieldPathElement parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.buf.validate.FieldPathElement parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.buf.validate.FieldPathElement parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static build.buf.validate.FieldPathElement parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static build.buf.validate.FieldPathElement parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static build.buf.validate.FieldPathElement parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.buf.validate.FieldPathElement parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static build.buf.validate.FieldPathElement parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(build.buf.validate.FieldPathElement prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * `FieldPathElement` provides enough information to nest through a single protobuf field.
   *
   * If the selected field is a map or repeated field, the `subscript` value selects a specific element from it.
   * A path that refers to a value nested under a map key or repeated field index will have a `subscript` value.
   * The `field_type` field allows unambiguous resolution of a field even if descriptors are not available.
   * </pre>
   *
   * Protobuf type {@code buf.validate.FieldPathElement}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:buf.validate.FieldPathElement)
      build.buf.validate.FieldPathElementOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return build.buf.validate.ValidateProto.internal_static_buf_validate_FieldPathElement_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return build.buf.validate.ValidateProto.internal_static_buf_validate_FieldPathElement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              build.buf.validate.FieldPathElement.class, build.buf.validate.FieldPathElement.Builder.class);
    }

    // Construct using build.buf.validate.FieldPathElement.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      fieldNumber_ = 0;
      fieldName_ = "";
      fieldType_ = 1;
      keyType_ = 1;
      valueType_ = 1;
      subscriptCase_ = 0;
      subscript_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return build.buf.validate.ValidateProto.internal_static_buf_validate_FieldPathElement_descriptor;
    }

    @java.lang.Override
    public build.buf.validate.FieldPathElement getDefaultInstanceForType() {
      return build.buf.validate.FieldPathElement.getDefaultInstance();
    }

    @java.lang.Override
    public build.buf.validate.FieldPathElement build() {
      build.buf.validate.FieldPathElement result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public build.buf.validate.FieldPathElement buildPartial() {
      build.buf.validate.FieldPathElement result = new build.buf.validate.FieldPathElement(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(build.buf.validate.FieldPathElement result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.fieldNumber_ = fieldNumber_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.fieldName_ = fieldName_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.fieldType_ = fieldType_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.keyType_ = keyType_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.valueType_ = valueType_;
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(build.buf.validate.FieldPathElement result) {
      result.subscriptCase_ = subscriptCase_;
      result.subscript_ = this.subscript_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof build.buf.validate.FieldPathElement) {
        return mergeFrom((build.buf.validate.FieldPathElement)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(build.buf.validate.FieldPathElement other) {
      if (other == build.buf.validate.FieldPathElement.getDefaultInstance()) return this;
      if (other.hasFieldNumber()) {
        setFieldNumber(other.getFieldNumber());
      }
      if (other.hasFieldName()) {
        fieldName_ = other.fieldName_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasFieldType()) {
        setFieldType(other.getFieldType());
      }
      if (other.hasKeyType()) {
        setKeyType(other.getKeyType());
      }
      if (other.hasValueType()) {
        setValueType(other.getValueType());
      }
      switch (other.getSubscriptCase()) {
        case INDEX: {
          setIndex(other.getIndex());
          break;
        }
        case BOOL_KEY: {
          setBoolKey(other.getBoolKey());
          break;
        }
        case INT_KEY: {
          setIntKey(other.getIntKey());
          break;
        }
        case UINT_KEY: {
          setUintKey(other.getUintKey());
          break;
        }
        case STRING_KEY: {
          subscriptCase_ = 10;
          subscript_ = other.subscript_;
          onChanged();
          break;
        }
        case SUBSCRIPT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              fieldNumber_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              fieldName_ = input.readBytes();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              int tmpRaw = input.readEnum();
              com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type tmpValue =
                  com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(3, tmpRaw);
              } else {
                fieldType_ = tmpRaw;
                bitField0_ |= 0x00000004;
              }
              break;
            } // case 24
            case 32: {
              int tmpRaw = input.readEnum();
              com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type tmpValue =
                  com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(4, tmpRaw);
              } else {
                keyType_ = tmpRaw;
                bitField0_ |= 0x00000008;
              }
              break;
            } // case 32
            case 40: {
              int tmpRaw = input.readEnum();
              com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type tmpValue =
                  com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(5, tmpRaw);
              } else {
                valueType_ = tmpRaw;
                bitField0_ |= 0x00000010;
              }
              break;
            } // case 40
            case 48: {
              subscript_ = input.readUInt64();
              subscriptCase_ = 6;
              break;
            } // case 48
            case 56: {
              subscript_ = input.readBool();
              subscriptCase_ = 7;
              break;
            } // case 56
            case 64: {
              subscript_ = input.readInt64();
              subscriptCase_ = 8;
              break;
            } // case 64
            case 72: {
              subscript_ = input.readUInt64();
              subscriptCase_ = 9;
              break;
            } // case 72
            case 82: {
              com.google.protobuf.ByteString bs = input.readBytes();
              subscriptCase_ = 10;
              subscript_ = bs;
              break;
            } // case 82
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int subscriptCase_ = 0;
    private java.lang.Object subscript_;
    public SubscriptCase
        getSubscriptCase() {
      return SubscriptCase.forNumber(
          subscriptCase_);
    }

    public Builder clearSubscript() {
      subscriptCase_ = 0;
      subscript_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private int fieldNumber_ ;
    /**
     * <pre>
     * `field_number` is the field number this path element refers to.
     * </pre>
     *
     * <code>optional int32 field_number = 1 [json_name = "fieldNumber"];</code>
     * @return Whether the fieldNumber field is set.
     */
    @java.lang.Override
    public boolean hasFieldNumber() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * `field_number` is the field number this path element refers to.
     * </pre>
     *
     * <code>optional int32 field_number = 1 [json_name = "fieldNumber"];</code>
     * @return The fieldNumber.
     */
    @java.lang.Override
    public int getFieldNumber() {
      return fieldNumber_;
    }
    /**
     * <pre>
     * `field_number` is the field number this path element refers to.
     * </pre>
     *
     * <code>optional int32 field_number = 1 [json_name = "fieldNumber"];</code>
     * @param value The fieldNumber to set.
     * @return This builder for chaining.
     */
    public Builder setFieldNumber(int value) {

      fieldNumber_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `field_number` is the field number this path element refers to.
     * </pre>
     *
     * <code>optional int32 field_number = 1 [json_name = "fieldNumber"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFieldNumber() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fieldNumber_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object fieldName_ = "";
    /**
     * <pre>
     * `field_name` contains the field name this path element refers to.
     * This can be used to display a human-readable path even if the field number is unknown.
     * </pre>
     *
     * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
     * @return Whether the fieldName field is set.
     */
    public boolean hasFieldName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * `field_name` contains the field name this path element refers to.
     * This can be used to display a human-readable path even if the field number is unknown.
     * </pre>
     *
     * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
     * @return The fieldName.
     */
    public java.lang.String getFieldName() {
      java.lang.Object ref = fieldName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fieldName_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * `field_name` contains the field name this path element refers to.
     * This can be used to display a human-readable path even if the field number is unknown.
     * </pre>
     *
     * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
     * @return The bytes for fieldName.
     */
    public com.google.protobuf.ByteString
        getFieldNameBytes() {
      java.lang.Object ref = fieldName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fieldName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * `field_name` contains the field name this path element refers to.
     * This can be used to display a human-readable path even if the field number is unknown.
     * </pre>
     *
     * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
     * @param value The fieldName to set.
     * @return This builder for chaining.
     */
    public Builder setFieldName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      fieldName_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `field_name` contains the field name this path element refers to.
     * This can be used to display a human-readable path even if the field number is unknown.
     * </pre>
     *
     * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFieldName() {
      fieldName_ = getDefaultInstance().getFieldName();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `field_name` contains the field name this path element refers to.
     * This can be used to display a human-readable path even if the field number is unknown.
     * </pre>
     *
     * <code>optional string field_name = 2 [json_name = "fieldName"];</code>
     * @param value The bytes for fieldName to set.
     * @return This builder for chaining.
     */
    public Builder setFieldNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      fieldName_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private int fieldType_ = 1;
    /**
     * <pre>
     * `field_type` specifies the type of this field. When using reflection, this value is not needed.
     *
     * This value is provided to make it possible to traverse unknown fields through wire data.
     * When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
     *
     * [1]: https://protobuf.dev/programming-guides/encoding/#packed
     * [2]: https://protobuf.dev/programming-guides/encoding/#groups
     *
     * N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
     * can be explicitly used in Protocol Buffers 2023 Edition.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type field_type = 3 [json_name = "fieldType"];</code>
     * @return Whether the fieldType field is set.
     */
    @java.lang.Override public boolean hasFieldType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * `field_type` specifies the type of this field. When using reflection, this value is not needed.
     *
     * This value is provided to make it possible to traverse unknown fields through wire data.
     * When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
     *
     * [1]: https://protobuf.dev/programming-guides/encoding/#packed
     * [2]: https://protobuf.dev/programming-guides/encoding/#groups
     *
     * N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
     * can be explicitly used in Protocol Buffers 2023 Edition.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type field_type = 3 [json_name = "fieldType"];</code>
     * @return The fieldType.
     */
    @java.lang.Override
    public com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getFieldType() {
      com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type result = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(fieldType_);
      return result == null ? com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE : result;
    }
    /**
     * <pre>
     * `field_type` specifies the type of this field. When using reflection, this value is not needed.
     *
     * This value is provided to make it possible to traverse unknown fields through wire data.
     * When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
     *
     * [1]: https://protobuf.dev/programming-guides/encoding/#packed
     * [2]: https://protobuf.dev/programming-guides/encoding/#groups
     *
     * N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
     * can be explicitly used in Protocol Buffers 2023 Edition.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type field_type = 3 [json_name = "fieldType"];</code>
     * @param value The fieldType to set.
     * @return This builder for chaining.
     */
    public Builder setFieldType(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      fieldType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `field_type` specifies the type of this field. When using reflection, this value is not needed.
     *
     * This value is provided to make it possible to traverse unknown fields through wire data.
     * When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
     *
     * [1]: https://protobuf.dev/programming-guides/encoding/#packed
     * [2]: https://protobuf.dev/programming-guides/encoding/#groups
     *
     * N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
     * can be explicitly used in Protocol Buffers 2023 Edition.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type field_type = 3 [json_name = "fieldType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFieldType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      fieldType_ = 1;
      onChanged();
      return this;
    }

    private int keyType_ = 1;
    /**
     * <pre>
     * `key_type` specifies the map key type of this field. This value is useful when traversing
     * unknown fields through wire data: specifically, it allows handling the differences between
     * different integer encodings.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type key_type = 4 [json_name = "keyType"];</code>
     * @return Whether the keyType field is set.
     */
    @java.lang.Override public boolean hasKeyType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * `key_type` specifies the map key type of this field. This value is useful when traversing
     * unknown fields through wire data: specifically, it allows handling the differences between
     * different integer encodings.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type key_type = 4 [json_name = "keyType"];</code>
     * @return The keyType.
     */
    @java.lang.Override
    public com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getKeyType() {
      com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type result = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(keyType_);
      return result == null ? com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE : result;
    }
    /**
     * <pre>
     * `key_type` specifies the map key type of this field. This value is useful when traversing
     * unknown fields through wire data: specifically, it allows handling the differences between
     * different integer encodings.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type key_type = 4 [json_name = "keyType"];</code>
     * @param value The keyType to set.
     * @return This builder for chaining.
     */
    public Builder setKeyType(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      keyType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `key_type` specifies the map key type of this field. This value is useful when traversing
     * unknown fields through wire data: specifically, it allows handling the differences between
     * different integer encodings.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type key_type = 4 [json_name = "keyType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyType() {
      bitField0_ = (bitField0_ & ~0x00000008);
      keyType_ = 1;
      onChanged();
      return this;
    }

    private int valueType_ = 1;
    /**
     * <pre>
     * `value_type` specifies map value type of this field. This is useful if you want to display a
     * value inside unknown fields through wire data.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type value_type = 5 [json_name = "valueType"];</code>
     * @return Whether the valueType field is set.
     */
    @java.lang.Override public boolean hasValueType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * `value_type` specifies map value type of this field. This is useful if you want to display a
     * value inside unknown fields through wire data.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type value_type = 5 [json_name = "valueType"];</code>
     * @return The valueType.
     */
    @java.lang.Override
    public com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type getValueType() {
      com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type result = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.forNumber(valueType_);
      return result == null ? com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE : result;
    }
    /**
     * <pre>
     * `value_type` specifies map value type of this field. This is useful if you want to display a
     * value inside unknown fields through wire data.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type value_type = 5 [json_name = "valueType"];</code>
     * @param value The valueType to set.
     * @return This builder for chaining.
     */
    public Builder setValueType(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      valueType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `value_type` specifies map value type of this field. This is useful if you want to display a
     * value inside unknown fields through wire data.
     * </pre>
     *
     * <code>optional .google.protobuf.FieldDescriptorProto.Type value_type = 5 [json_name = "valueType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearValueType() {
      bitField0_ = (bitField0_ & ~0x00000010);
      valueType_ = 1;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * `index` specifies a 0-based index into a repeated field.
     * </pre>
     *
     * <code>uint64 index = 6 [json_name = "index"];</code>
     * @return Whether the index field is set.
     */
    public boolean hasIndex() {
      return subscriptCase_ == 6;
    }
    /**
     * <pre>
     * `index` specifies a 0-based index into a repeated field.
     * </pre>
     *
     * <code>uint64 index = 6 [json_name = "index"];</code>
     * @return The index.
     */
    public long getIndex() {
      if (subscriptCase_ == 6) {
        return (java.lang.Long) subscript_;
      }
      return 0L;
    }
    /**
     * <pre>
     * `index` specifies a 0-based index into a repeated field.
     * </pre>
     *
     * <code>uint64 index = 6 [json_name = "index"];</code>
     * @param value The index to set.
     * @return This builder for chaining.
     */
    public Builder setIndex(long value) {

      subscriptCase_ = 6;
      subscript_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `index` specifies a 0-based index into a repeated field.
     * </pre>
     *
     * <code>uint64 index = 6 [json_name = "index"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIndex() {
      if (subscriptCase_ == 6) {
        subscriptCase_ = 0;
        subscript_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * `bool_key` specifies a map key of type bool.
     * </pre>
     *
     * <code>bool bool_key = 7 [json_name = "boolKey"];</code>
     * @return Whether the boolKey field is set.
     */
    public boolean hasBoolKey() {
      return subscriptCase_ == 7;
    }
    /**
     * <pre>
     * `bool_key` specifies a map key of type bool.
     * </pre>
     *
     * <code>bool bool_key = 7 [json_name = "boolKey"];</code>
     * @return The boolKey.
     */
    public boolean getBoolKey() {
      if (subscriptCase_ == 7) {
        return (java.lang.Boolean) subscript_;
      }
      return false;
    }
    /**
     * <pre>
     * `bool_key` specifies a map key of type bool.
     * </pre>
     *
     * <code>bool bool_key = 7 [json_name = "boolKey"];</code>
     * @param value The boolKey to set.
     * @return This builder for chaining.
     */
    public Builder setBoolKey(boolean value) {

      subscriptCase_ = 7;
      subscript_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `bool_key` specifies a map key of type bool.
     * </pre>
     *
     * <code>bool bool_key = 7 [json_name = "boolKey"];</code>
     * @return This builder for chaining.
     */
    public Builder clearBoolKey() {
      if (subscriptCase_ == 7) {
        subscriptCase_ = 0;
        subscript_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
     * </pre>
     *
     * <code>int64 int_key = 8 [json_name = "intKey"];</code>
     * @return Whether the intKey field is set.
     */
    public boolean hasIntKey() {
      return subscriptCase_ == 8;
    }
    /**
     * <pre>
     * `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
     * </pre>
     *
     * <code>int64 int_key = 8 [json_name = "intKey"];</code>
     * @return The intKey.
     */
    public long getIntKey() {
      if (subscriptCase_ == 8) {
        return (java.lang.Long) subscript_;
      }
      return 0L;
    }
    /**
     * <pre>
     * `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
     * </pre>
     *
     * <code>int64 int_key = 8 [json_name = "intKey"];</code>
     * @param value The intKey to set.
     * @return This builder for chaining.
     */
    public Builder setIntKey(long value) {

      subscriptCase_ = 8;
      subscript_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
     * </pre>
     *
     * <code>int64 int_key = 8 [json_name = "intKey"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIntKey() {
      if (subscriptCase_ == 8) {
        subscriptCase_ = 0;
        subscript_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
     * </pre>
     *
     * <code>uint64 uint_key = 9 [json_name = "uintKey"];</code>
     * @return Whether the uintKey field is set.
     */
    public boolean hasUintKey() {
      return subscriptCase_ == 9;
    }
    /**
     * <pre>
     * `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
     * </pre>
     *
     * <code>uint64 uint_key = 9 [json_name = "uintKey"];</code>
     * @return The uintKey.
     */
    public long getUintKey() {
      if (subscriptCase_ == 9) {
        return (java.lang.Long) subscript_;
      }
      return 0L;
    }
    /**
     * <pre>
     * `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
     * </pre>
     *
     * <code>uint64 uint_key = 9 [json_name = "uintKey"];</code>
     * @param value The uintKey to set.
     * @return This builder for chaining.
     */
    public Builder setUintKey(long value) {

      subscriptCase_ = 9;
      subscript_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
     * </pre>
     *
     * <code>uint64 uint_key = 9 [json_name = "uintKey"];</code>
     * @return This builder for chaining.
     */
    public Builder clearUintKey() {
      if (subscriptCase_ == 9) {
        subscriptCase_ = 0;
        subscript_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * `string_key` specifies a map key of type string.
     * </pre>
     *
     * <code>string string_key = 10 [json_name = "stringKey"];</code>
     * @return Whether the stringKey field is set.
     */
    @java.lang.Override
    public boolean hasStringKey() {
      return subscriptCase_ == 10;
    }
    /**
     * <pre>
     * `string_key` specifies a map key of type string.
     * </pre>
     *
     * <code>string string_key = 10 [json_name = "stringKey"];</code>
     * @return The stringKey.
     */
    @java.lang.Override
    public java.lang.String getStringKey() {
      java.lang.Object ref = "";
      if (subscriptCase_ == 10) {
        ref = subscript_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (subscriptCase_ == 10) {
          if (bs.isValidUtf8()) {
            subscript_ = s;
          }
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * `string_key` specifies a map key of type string.
     * </pre>
     *
     * <code>string string_key = 10 [json_name = "stringKey"];</code>
     * @return The bytes for stringKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStringKeyBytes() {
      java.lang.Object ref = "";
      if (subscriptCase_ == 10) {
        ref = subscript_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (subscriptCase_ == 10) {
          subscript_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * `string_key` specifies a map key of type string.
     * </pre>
     *
     * <code>string string_key = 10 [json_name = "stringKey"];</code>
     * @param value The stringKey to set.
     * @return This builder for chaining.
     */
    public Builder setStringKey(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      subscriptCase_ = 10;
      subscript_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `string_key` specifies a map key of type string.
     * </pre>
     *
     * <code>string string_key = 10 [json_name = "stringKey"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStringKey() {
      if (subscriptCase_ == 10) {
        subscriptCase_ = 0;
        subscript_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * `string_key` specifies a map key of type string.
     * </pre>
     *
     * <code>string string_key = 10 [json_name = "stringKey"];</code>
     * @param value The bytes for stringKey to set.
     * @return This builder for chaining.
     */
    public Builder setStringKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      subscriptCase_ = 10;
      subscript_ = value;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:buf.validate.FieldPathElement)
  }

  // @@protoc_insertion_point(class_scope:buf.validate.FieldPathElement)
  private static final build.buf.validate.FieldPathElement DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new build.buf.validate.FieldPathElement();
  }

  public static build.buf.validate.FieldPathElement getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FieldPathElement>
      PARSER = new com.google.protobuf.AbstractParser<FieldPathElement>() {
    @java.lang.Override
    public FieldPathElement parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FieldPathElement> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FieldPathElement> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public build.buf.validate.FieldPathElement getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

