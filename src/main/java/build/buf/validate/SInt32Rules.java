// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buf/validate/validate.proto

package build.buf.validate;

/**
 * <pre>
 * SInt32Rules describes the constraints applied to `sint32` values.
 * </pre>
 *
 * Protobuf type {@code buf.validate.SInt32Rules}
 */
public final class SInt32Rules extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:buf.validate.SInt32Rules)
    SInt32RulesOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SInt32Rules.newBuilder() to construct.
  private SInt32Rules(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SInt32Rules() {
    in_ = emptyIntList();
    notIn_ = emptyIntList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SInt32Rules();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return build.buf.validate.ValidateProto.internal_static_buf_validate_SInt32Rules_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return build.buf.validate.ValidateProto.internal_static_buf_validate_SInt32Rules_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            build.buf.validate.SInt32Rules.class, build.buf.validate.SInt32Rules.Builder.class);
  }

  private int bitField0_;
  public static final int CONST_FIELD_NUMBER = 1;
  private int const_ = 0;
  /**
   * <pre>
   *`const` requires the field value to exactly match the specified value. If
   * the field value doesn't match, an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must equal 42
   *   sint32 value = 1 [(buf.validate.field).sint32.const = 42];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 const = 1 [json_name = "const", (.buf.validate.priv.field) = { ... }</code>
   * @return Whether the const field is set.
   */
  @java.lang.Override
  public boolean hasConst() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   *`const` requires the field value to exactly match the specified value. If
   * the field value doesn't match, an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must equal 42
   *   sint32 value = 1 [(buf.validate.field).sint32.const = 42];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 const = 1 [json_name = "const", (.buf.validate.priv.field) = { ... }</code>
   * @return The const.
   */
  @java.lang.Override
  public int getConst() {
    return const_;
  }

  public static final int LT_FIELD_NUMBER = 2;
  private int lt_ = 0;
  /**
   * <pre>
   *`lt` requires the field value to be less than the specified value (field
   * &lt; value). If the field value is equal to or greater than the specified
   * value, an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be less than 10
   *   sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 lt = 2 [json_name = "lt", (.buf.validate.priv.field) = { ... }</code>
   * @return Whether the lt field is set.
   */
  @java.lang.Override
  public boolean hasLt() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   *`lt` requires the field value to be less than the specified value (field
   * &lt; value). If the field value is equal to or greater than the specified
   * value, an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be less than 10
   *   sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 lt = 2 [json_name = "lt", (.buf.validate.priv.field) = { ... }</code>
   * @return The lt.
   */
  @java.lang.Override
  public int getLt() {
    return lt_;
  }

  public static final int LTE_FIELD_NUMBER = 3;
  private int lte_ = 0;
  /**
   * <pre>
   *`lte` requires the field value to be less than or equal to the specified
   * value (field &lt;= value). If the field value is greater than the specified
   * value, an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be less than or equal to 10
   *   sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 lte = 3 [json_name = "lte", (.buf.validate.priv.field) = { ... }</code>
   * @return Whether the lte field is set.
   */
  @java.lang.Override
  public boolean hasLte() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   *`lte` requires the field value to be less than or equal to the specified
   * value (field &lt;= value). If the field value is greater than the specified
   * value, an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be less than or equal to 10
   *   sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 lte = 3 [json_name = "lte", (.buf.validate.priv.field) = { ... }</code>
   * @return The lte.
   */
  @java.lang.Override
  public int getLte() {
    return lte_;
  }

  public static final int GT_FIELD_NUMBER = 4;
  private int gt_ = 0;
  /**
   * <pre>
   *`gt` requires the field value to be greater than the specified value
   * (exclusive). If the value of `gt` is larger than a specified `lt` or
   * `lte`, the range is reversed, and the field value must be outside the
   * specified range. If the field value doesn't meet the required conditions,
   * an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be greater than 5 [sint32.gt]
   *  sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
   *
   *  // value must be greater than 5 and less than 10 [sint32.gt_lt]
   *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
   *
   *  // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
   *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 gt = 4 [json_name = "gt", (.buf.validate.priv.field) = { ... }</code>
   * @return Whether the gt field is set.
   */
  @java.lang.Override
  public boolean hasGt() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   *`gt` requires the field value to be greater than the specified value
   * (exclusive). If the value of `gt` is larger than a specified `lt` or
   * `lte`, the range is reversed, and the field value must be outside the
   * specified range. If the field value doesn't meet the required conditions,
   * an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be greater than 5 [sint32.gt]
   *  sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
   *
   *  // value must be greater than 5 and less than 10 [sint32.gt_lt]
   *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
   *
   *  // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
   *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 gt = 4 [json_name = "gt", (.buf.validate.priv.field) = { ... }</code>
   * @return The gt.
   */
  @java.lang.Override
  public int getGt() {
    return gt_;
  }

  public static final int GTE_FIELD_NUMBER = 5;
  private int gte_ = 0;
  /**
   * <pre>
   *`gte` requires the field value to be greater than or equal to the specified
   * value (exclusive). If the value of `gte` is larger than a specified `lt`
   * or `lte`, the range is reversed, and the field value must be outside the
   * specified range. If the field value doesn't meet the required conditions,
   * an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be greater than or equal to 5 [sint32.gte]
   *  sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
   *
   *  // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
   *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
   *
   *  // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
   *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 gte = 5 [json_name = "gte", (.buf.validate.priv.field) = { ... }</code>
   * @return Whether the gte field is set.
   */
  @java.lang.Override
  public boolean hasGte() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   *`gte` requires the field value to be greater than or equal to the specified
   * value (exclusive). If the value of `gte` is larger than a specified `lt`
   * or `lte`, the range is reversed, and the field value must be outside the
   * specified range. If the field value doesn't meet the required conditions,
   * an error message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be greater than or equal to 5 [sint32.gte]
   *  sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
   *
   *  // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
   *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
   *
   *  // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
   *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
   *}
   *```
   * </pre>
   *
   * <code>optional sint32 gte = 5 [json_name = "gte", (.buf.validate.priv.field) = { ... }</code>
   * @return The gte.
   */
  @java.lang.Override
  public int getGte() {
    return gte_;
  }

  public static final int IN_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList in_;
  /**
   * <pre>
   *`in` requires the field value to be equal to one of the specified values.
   * If the field value isn't one of the specified values, an error message is
   * generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be in list [1, 2, 3]
   *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
   *}
   *```
   * </pre>
   *
   * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
   * @return A list containing the in.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getInList() {
    return in_;
  }
  /**
   * <pre>
   *`in` requires the field value to be equal to one of the specified values.
   * If the field value isn't one of the specified values, an error message is
   * generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be in list [1, 2, 3]
   *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
   *}
   *```
   * </pre>
   *
   * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
   * @return The count of in.
   */
  public int getInCount() {
    return in_.size();
  }
  /**
   * <pre>
   *`in` requires the field value to be equal to one of the specified values.
   * If the field value isn't one of the specified values, an error message is
   * generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must be in list [1, 2, 3]
   *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
   *}
   *```
   * </pre>
   *
   * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
   * @param index The index of the element to return.
   * @return The in at the given index.
   */
  public int getIn(int index) {
    return in_.getInt(index);
  }
  private int inMemoizedSerializedSize = -1;

  public static final int NOT_IN_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList notIn_;
  /**
   * <pre>
   *`not_in` requires the field value to not be equal to any of the specified
   * values. If the field value is one of the specified values, an error
   * message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must not be in list [1, 2, 3]
   *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
   *}
   *```
   * </pre>
   *
   * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
   * @return A list containing the notIn.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getNotInList() {
    return notIn_;
  }
  /**
   * <pre>
   *`not_in` requires the field value to not be equal to any of the specified
   * values. If the field value is one of the specified values, an error
   * message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must not be in list [1, 2, 3]
   *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
   *}
   *```
   * </pre>
   *
   * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
   * @return The count of notIn.
   */
  public int getNotInCount() {
    return notIn_.size();
  }
  /**
   * <pre>
   *`not_in` requires the field value to not be equal to any of the specified
   * values. If the field value is one of the specified values, an error
   * message is generated.
   *
   *```proto
   *message MySInt32 {
   *  // value must not be in list [1, 2, 3]
   *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
   *}
   *```
   * </pre>
   *
   * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
   * @param index The index of the element to return.
   * @return The notIn at the given index.
   */
  public int getNotIn(int index) {
    return notIn_.getInt(index);
  }
  private int notInMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeSInt32(1, const_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeSInt32(2, lt_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeSInt32(3, lte_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeSInt32(4, gt_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeSInt32(5, gte_);
    }
    if (getInList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(inMemoizedSerializedSize);
    }
    for (int i = 0; i < in_.size(); i++) {
      output.writeSInt32NoTag(in_.getInt(i));
    }
    if (getNotInList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(notInMemoizedSerializedSize);
    }
    for (int i = 0; i < notIn_.size(); i++) {
      output.writeSInt32NoTag(notIn_.getInt(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(1, const_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(2, lt_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(3, lte_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(4, gt_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(5, gte_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < in_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeSInt32SizeNoTag(in_.getInt(i));
      }
      size += dataSize;
      if (!getInList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      inMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < notIn_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeSInt32SizeNoTag(notIn_.getInt(i));
      }
      size += dataSize;
      if (!getNotInList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      notInMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof build.buf.validate.SInt32Rules)) {
      return super.equals(obj);
    }
    build.buf.validate.SInt32Rules other = (build.buf.validate.SInt32Rules) obj;

    if (hasConst() != other.hasConst()) return false;
    if (hasConst()) {
      if (getConst()
          != other.getConst()) return false;
    }
    if (hasLt() != other.hasLt()) return false;
    if (hasLt()) {
      if (getLt()
          != other.getLt()) return false;
    }
    if (hasLte() != other.hasLte()) return false;
    if (hasLte()) {
      if (getLte()
          != other.getLte()) return false;
    }
    if (hasGt() != other.hasGt()) return false;
    if (hasGt()) {
      if (getGt()
          != other.getGt()) return false;
    }
    if (hasGte() != other.hasGte()) return false;
    if (hasGte()) {
      if (getGte()
          != other.getGte()) return false;
    }
    if (!getInList()
        .equals(other.getInList())) return false;
    if (!getNotInList()
        .equals(other.getNotInList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasConst()) {
      hash = (37 * hash) + CONST_FIELD_NUMBER;
      hash = (53 * hash) + getConst();
    }
    if (hasLt()) {
      hash = (37 * hash) + LT_FIELD_NUMBER;
      hash = (53 * hash) + getLt();
    }
    if (hasLte()) {
      hash = (37 * hash) + LTE_FIELD_NUMBER;
      hash = (53 * hash) + getLte();
    }
    if (hasGt()) {
      hash = (37 * hash) + GT_FIELD_NUMBER;
      hash = (53 * hash) + getGt();
    }
    if (hasGte()) {
      hash = (37 * hash) + GTE_FIELD_NUMBER;
      hash = (53 * hash) + getGte();
    }
    if (getInCount() > 0) {
      hash = (37 * hash) + IN_FIELD_NUMBER;
      hash = (53 * hash) + getInList().hashCode();
    }
    if (getNotInCount() > 0) {
      hash = (37 * hash) + NOT_IN_FIELD_NUMBER;
      hash = (53 * hash) + getNotInList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static build.buf.validate.SInt32Rules parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.buf.validate.SInt32Rules parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.buf.validate.SInt32Rules parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.buf.validate.SInt32Rules parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.buf.validate.SInt32Rules parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static build.buf.validate.SInt32Rules parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static build.buf.validate.SInt32Rules parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.buf.validate.SInt32Rules parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static build.buf.validate.SInt32Rules parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static build.buf.validate.SInt32Rules parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static build.buf.validate.SInt32Rules parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static build.buf.validate.SInt32Rules parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(build.buf.validate.SInt32Rules prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SInt32Rules describes the constraints applied to `sint32` values.
   * </pre>
   *
   * Protobuf type {@code buf.validate.SInt32Rules}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:buf.validate.SInt32Rules)
      build.buf.validate.SInt32RulesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return build.buf.validate.ValidateProto.internal_static_buf_validate_SInt32Rules_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return build.buf.validate.ValidateProto.internal_static_buf_validate_SInt32Rules_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              build.buf.validate.SInt32Rules.class, build.buf.validate.SInt32Rules.Builder.class);
    }

    // Construct using build.buf.validate.SInt32Rules.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      const_ = 0;
      lt_ = 0;
      lte_ = 0;
      gt_ = 0;
      gte_ = 0;
      in_ = emptyIntList();
      notIn_ = emptyIntList();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return build.buf.validate.ValidateProto.internal_static_buf_validate_SInt32Rules_descriptor;
    }

    @java.lang.Override
    public build.buf.validate.SInt32Rules getDefaultInstanceForType() {
      return build.buf.validate.SInt32Rules.getDefaultInstance();
    }

    @java.lang.Override
    public build.buf.validate.SInt32Rules build() {
      build.buf.validate.SInt32Rules result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public build.buf.validate.SInt32Rules buildPartial() {
      build.buf.validate.SInt32Rules result = new build.buf.validate.SInt32Rules(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(build.buf.validate.SInt32Rules result) {
      if (((bitField0_ & 0x00000020) != 0)) {
        in_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.in_ = in_;
      if (((bitField0_ & 0x00000040) != 0)) {
        notIn_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.notIn_ = notIn_;
    }

    private void buildPartial0(build.buf.validate.SInt32Rules result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.const_ = const_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.lt_ = lt_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.lte_ = lte_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.gt_ = gt_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.gte_ = gte_;
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof build.buf.validate.SInt32Rules) {
        return mergeFrom((build.buf.validate.SInt32Rules)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(build.buf.validate.SInt32Rules other) {
      if (other == build.buf.validate.SInt32Rules.getDefaultInstance()) return this;
      if (other.hasConst()) {
        setConst(other.getConst());
      }
      if (other.hasLt()) {
        setLt(other.getLt());
      }
      if (other.hasLte()) {
        setLte(other.getLte());
      }
      if (other.hasGt()) {
        setGt(other.getGt());
      }
      if (other.hasGte()) {
        setGte(other.getGte());
      }
      if (!other.in_.isEmpty()) {
        if (in_.isEmpty()) {
          in_ = other.in_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureInIsMutable();
          in_.addAll(other.in_);
        }
        onChanged();
      }
      if (!other.notIn_.isEmpty()) {
        if (notIn_.isEmpty()) {
          notIn_ = other.notIn_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureNotInIsMutable();
          notIn_.addAll(other.notIn_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              const_ = input.readSInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              lt_ = input.readSInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              lte_ = input.readSInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              gt_ = input.readSInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              gte_ = input.readSInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              int v = input.readSInt32();
              ensureInIsMutable();
              in_.addInt(v);
              break;
            } // case 48
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureInIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                in_.addInt(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            } // case 50
            case 56: {
              int v = input.readSInt32();
              ensureNotInIsMutable();
              notIn_.addInt(v);
              break;
            } // case 56
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureNotInIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                notIn_.addInt(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int const_ ;
    /**
     * <pre>
     *`const` requires the field value to exactly match the specified value. If
     * the field value doesn't match, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must equal 42
     *   sint32 value = 1 [(buf.validate.field).sint32.const = 42];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 const = 1 [json_name = "const", (.buf.validate.priv.field) = { ... }</code>
     * @return Whether the const field is set.
     */
    @java.lang.Override
    public boolean hasConst() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *`const` requires the field value to exactly match the specified value. If
     * the field value doesn't match, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must equal 42
     *   sint32 value = 1 [(buf.validate.field).sint32.const = 42];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 const = 1 [json_name = "const", (.buf.validate.priv.field) = { ... }</code>
     * @return The const.
     */
    @java.lang.Override
    public int getConst() {
      return const_;
    }
    /**
     * <pre>
     *`const` requires the field value to exactly match the specified value. If
     * the field value doesn't match, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must equal 42
     *   sint32 value = 1 [(buf.validate.field).sint32.const = 42];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 const = 1 [json_name = "const", (.buf.validate.priv.field) = { ... }</code>
     * @param value The const to set.
     * @return This builder for chaining.
     */
    public Builder setConst(int value) {

      const_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`const` requires the field value to exactly match the specified value. If
     * the field value doesn't match, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must equal 42
     *   sint32 value = 1 [(buf.validate.field).sint32.const = 42];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 const = 1 [json_name = "const", (.buf.validate.priv.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearConst() {
      bitField0_ = (bitField0_ & ~0x00000001);
      const_ = 0;
      onChanged();
      return this;
    }

    private int lt_ ;
    /**
     * <pre>
     *`lt` requires the field value to be less than the specified value (field
     * &lt; value). If the field value is equal to or greater than the specified
     * value, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be less than 10
     *   sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 lt = 2 [json_name = "lt", (.buf.validate.priv.field) = { ... }</code>
     * @return Whether the lt field is set.
     */
    @java.lang.Override
    public boolean hasLt() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     *`lt` requires the field value to be less than the specified value (field
     * &lt; value). If the field value is equal to or greater than the specified
     * value, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be less than 10
     *   sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 lt = 2 [json_name = "lt", (.buf.validate.priv.field) = { ... }</code>
     * @return The lt.
     */
    @java.lang.Override
    public int getLt() {
      return lt_;
    }
    /**
     * <pre>
     *`lt` requires the field value to be less than the specified value (field
     * &lt; value). If the field value is equal to or greater than the specified
     * value, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be less than 10
     *   sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 lt = 2 [json_name = "lt", (.buf.validate.priv.field) = { ... }</code>
     * @param value The lt to set.
     * @return This builder for chaining.
     */
    public Builder setLt(int value) {

      lt_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`lt` requires the field value to be less than the specified value (field
     * &lt; value). If the field value is equal to or greater than the specified
     * value, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be less than 10
     *   sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 lt = 2 [json_name = "lt", (.buf.validate.priv.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearLt() {
      bitField0_ = (bitField0_ & ~0x00000002);
      lt_ = 0;
      onChanged();
      return this;
    }

    private int lte_ ;
    /**
     * <pre>
     *`lte` requires the field value to be less than or equal to the specified
     * value (field &lt;= value). If the field value is greater than the specified
     * value, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be less than or equal to 10
     *   sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 lte = 3 [json_name = "lte", (.buf.validate.priv.field) = { ... }</code>
     * @return Whether the lte field is set.
     */
    @java.lang.Override
    public boolean hasLte() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     *`lte` requires the field value to be less than or equal to the specified
     * value (field &lt;= value). If the field value is greater than the specified
     * value, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be less than or equal to 10
     *   sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 lte = 3 [json_name = "lte", (.buf.validate.priv.field) = { ... }</code>
     * @return The lte.
     */
    @java.lang.Override
    public int getLte() {
      return lte_;
    }
    /**
     * <pre>
     *`lte` requires the field value to be less than or equal to the specified
     * value (field &lt;= value). If the field value is greater than the specified
     * value, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be less than or equal to 10
     *   sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 lte = 3 [json_name = "lte", (.buf.validate.priv.field) = { ... }</code>
     * @param value The lte to set.
     * @return This builder for chaining.
     */
    public Builder setLte(int value) {

      lte_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`lte` requires the field value to be less than or equal to the specified
     * value (field &lt;= value). If the field value is greater than the specified
     * value, an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be less than or equal to 10
     *   sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 lte = 3 [json_name = "lte", (.buf.validate.priv.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearLte() {
      bitField0_ = (bitField0_ & ~0x00000004);
      lte_ = 0;
      onChanged();
      return this;
    }

    private int gt_ ;
    /**
     * <pre>
     *`gt` requires the field value to be greater than the specified value
     * (exclusive). If the value of `gt` is larger than a specified `lt` or
     * `lte`, the range is reversed, and the field value must be outside the
     * specified range. If the field value doesn't meet the required conditions,
     * an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be greater than 5 [sint32.gt]
     *  sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
     *
     *  // value must be greater than 5 and less than 10 [sint32.gt_lt]
     *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
     *
     *  // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
     *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 gt = 4 [json_name = "gt", (.buf.validate.priv.field) = { ... }</code>
     * @return Whether the gt field is set.
     */
    @java.lang.Override
    public boolean hasGt() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     *`gt` requires the field value to be greater than the specified value
     * (exclusive). If the value of `gt` is larger than a specified `lt` or
     * `lte`, the range is reversed, and the field value must be outside the
     * specified range. If the field value doesn't meet the required conditions,
     * an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be greater than 5 [sint32.gt]
     *  sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
     *
     *  // value must be greater than 5 and less than 10 [sint32.gt_lt]
     *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
     *
     *  // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
     *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 gt = 4 [json_name = "gt", (.buf.validate.priv.field) = { ... }</code>
     * @return The gt.
     */
    @java.lang.Override
    public int getGt() {
      return gt_;
    }
    /**
     * <pre>
     *`gt` requires the field value to be greater than the specified value
     * (exclusive). If the value of `gt` is larger than a specified `lt` or
     * `lte`, the range is reversed, and the field value must be outside the
     * specified range. If the field value doesn't meet the required conditions,
     * an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be greater than 5 [sint32.gt]
     *  sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
     *
     *  // value must be greater than 5 and less than 10 [sint32.gt_lt]
     *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
     *
     *  // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
     *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 gt = 4 [json_name = "gt", (.buf.validate.priv.field) = { ... }</code>
     * @param value The gt to set.
     * @return This builder for chaining.
     */
    public Builder setGt(int value) {

      gt_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`gt` requires the field value to be greater than the specified value
     * (exclusive). If the value of `gt` is larger than a specified `lt` or
     * `lte`, the range is reversed, and the field value must be outside the
     * specified range. If the field value doesn't meet the required conditions,
     * an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be greater than 5 [sint32.gt]
     *  sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
     *
     *  // value must be greater than 5 and less than 10 [sint32.gt_lt]
     *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
     *
     *  // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
     *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 gt = 4 [json_name = "gt", (.buf.validate.priv.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearGt() {
      bitField0_ = (bitField0_ & ~0x00000008);
      gt_ = 0;
      onChanged();
      return this;
    }

    private int gte_ ;
    /**
     * <pre>
     *`gte` requires the field value to be greater than or equal to the specified
     * value (exclusive). If the value of `gte` is larger than a specified `lt`
     * or `lte`, the range is reversed, and the field value must be outside the
     * specified range. If the field value doesn't meet the required conditions,
     * an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be greater than or equal to 5 [sint32.gte]
     *  sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
     *
     *  // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
     *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
     *
     *  // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
     *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 gte = 5 [json_name = "gte", (.buf.validate.priv.field) = { ... }</code>
     * @return Whether the gte field is set.
     */
    @java.lang.Override
    public boolean hasGte() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     *`gte` requires the field value to be greater than or equal to the specified
     * value (exclusive). If the value of `gte` is larger than a specified `lt`
     * or `lte`, the range is reversed, and the field value must be outside the
     * specified range. If the field value doesn't meet the required conditions,
     * an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be greater than or equal to 5 [sint32.gte]
     *  sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
     *
     *  // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
     *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
     *
     *  // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
     *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 gte = 5 [json_name = "gte", (.buf.validate.priv.field) = { ... }</code>
     * @return The gte.
     */
    @java.lang.Override
    public int getGte() {
      return gte_;
    }
    /**
     * <pre>
     *`gte` requires the field value to be greater than or equal to the specified
     * value (exclusive). If the value of `gte` is larger than a specified `lt`
     * or `lte`, the range is reversed, and the field value must be outside the
     * specified range. If the field value doesn't meet the required conditions,
     * an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be greater than or equal to 5 [sint32.gte]
     *  sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
     *
     *  // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
     *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
     *
     *  // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
     *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 gte = 5 [json_name = "gte", (.buf.validate.priv.field) = { ... }</code>
     * @param value The gte to set.
     * @return This builder for chaining.
     */
    public Builder setGte(int value) {

      gte_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`gte` requires the field value to be greater than or equal to the specified
     * value (exclusive). If the value of `gte` is larger than a specified `lt`
     * or `lte`, the range is reversed, and the field value must be outside the
     * specified range. If the field value doesn't meet the required conditions,
     * an error message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be greater than or equal to 5 [sint32.gte]
     *  sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
     *
     *  // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
     *  sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
     *
     *  // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
     *  sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
     *}
     *```
     * </pre>
     *
     * <code>optional sint32 gte = 5 [json_name = "gte", (.buf.validate.priv.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearGte() {
      bitField0_ = (bitField0_ & ~0x00000010);
      gte_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList in_ = emptyIntList();
    private void ensureInIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        in_ = mutableCopy(in_);
        bitField0_ |= 0x00000020;
      }
    }
    /**
     * <pre>
     *`in` requires the field value to be equal to one of the specified values.
     * If the field value isn't one of the specified values, an error message is
     * generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
     * @return A list containing the in.
     */
    public java.util.List<java.lang.Integer>
        getInList() {
      return ((bitField0_ & 0x00000020) != 0) ?
               java.util.Collections.unmodifiableList(in_) : in_;
    }
    /**
     * <pre>
     *`in` requires the field value to be equal to one of the specified values.
     * If the field value isn't one of the specified values, an error message is
     * generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
     * @return The count of in.
     */
    public int getInCount() {
      return in_.size();
    }
    /**
     * <pre>
     *`in` requires the field value to be equal to one of the specified values.
     * If the field value isn't one of the specified values, an error message is
     * generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The in at the given index.
     */
    public int getIn(int index) {
      return in_.getInt(index);
    }
    /**
     * <pre>
     *`in` requires the field value to be equal to one of the specified values.
     * If the field value isn't one of the specified values, an error message is
     * generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
     * @param index The index to set the value at.
     * @param value The in to set.
     * @return This builder for chaining.
     */
    public Builder setIn(
        int index, int value) {

      ensureInIsMutable();
      in_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`in` requires the field value to be equal to one of the specified values.
     * If the field value isn't one of the specified values, an error message is
     * generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
     * @param value The in to add.
     * @return This builder for chaining.
     */
    public Builder addIn(int value) {

      ensureInIsMutable();
      in_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`in` requires the field value to be equal to one of the specified values.
     * If the field value isn't one of the specified values, an error message is
     * generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
     * @param values The in to add.
     * @return This builder for chaining.
     */
    public Builder addAllIn(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureInIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, in_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`in` requires the field value to be equal to one of the specified values.
     * If the field value isn't one of the specified values, an error message is
     * generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 in = 6 [json_name = "in", (.buf.validate.priv.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearIn() {
      in_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList notIn_ = emptyIntList();
    private void ensureNotInIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        notIn_ = mutableCopy(notIn_);
        bitField0_ |= 0x00000040;
      }
    }
    /**
     * <pre>
     *`not_in` requires the field value to not be equal to any of the specified
     * values. If the field value is one of the specified values, an error
     * message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must not be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
     * @return A list containing the notIn.
     */
    public java.util.List<java.lang.Integer>
        getNotInList() {
      return ((bitField0_ & 0x00000040) != 0) ?
               java.util.Collections.unmodifiableList(notIn_) : notIn_;
    }
    /**
     * <pre>
     *`not_in` requires the field value to not be equal to any of the specified
     * values. If the field value is one of the specified values, an error
     * message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must not be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
     * @return The count of notIn.
     */
    public int getNotInCount() {
      return notIn_.size();
    }
    /**
     * <pre>
     *`not_in` requires the field value to not be equal to any of the specified
     * values. If the field value is one of the specified values, an error
     * message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must not be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The notIn at the given index.
     */
    public int getNotIn(int index) {
      return notIn_.getInt(index);
    }
    /**
     * <pre>
     *`not_in` requires the field value to not be equal to any of the specified
     * values. If the field value is one of the specified values, an error
     * message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must not be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
     * @param index The index to set the value at.
     * @param value The notIn to set.
     * @return This builder for chaining.
     */
    public Builder setNotIn(
        int index, int value) {

      ensureNotInIsMutable();
      notIn_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`not_in` requires the field value to not be equal to any of the specified
     * values. If the field value is one of the specified values, an error
     * message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must not be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
     * @param value The notIn to add.
     * @return This builder for chaining.
     */
    public Builder addNotIn(int value) {

      ensureNotInIsMutable();
      notIn_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`not_in` requires the field value to not be equal to any of the specified
     * values. If the field value is one of the specified values, an error
     * message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must not be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
     * @param values The notIn to add.
     * @return This builder for chaining.
     */
    public Builder addAllNotIn(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureNotInIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, notIn_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *`not_in` requires the field value to not be equal to any of the specified
     * values. If the field value is one of the specified values, an error
     * message is generated.
     *
     *```proto
     *message MySInt32 {
     *  // value must not be in list [1, 2, 3]
     *  repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
     *}
     *```
     * </pre>
     *
     * <code>repeated sint32 not_in = 7 [json_name = "notIn", (.buf.validate.priv.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearNotIn() {
      notIn_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:buf.validate.SInt32Rules)
  }

  // @@protoc_insertion_point(class_scope:buf.validate.SInt32Rules)
  private static final build.buf.validate.SInt32Rules DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new build.buf.validate.SInt32Rules();
  }

  public static build.buf.validate.SInt32Rules getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SInt32Rules>
      PARSER = new com.google.protobuf.AbstractParser<SInt32Rules>() {
    @java.lang.Override
    public SInt32Rules parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SInt32Rules> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SInt32Rules> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public build.buf.validate.SInt32Rules getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

