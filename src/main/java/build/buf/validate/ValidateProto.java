// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buf/validate/validate.proto

package build.buf.validate;

public final class ValidateProto {
  private ValidateProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(build.buf.validate.ValidateProto.message);
    registry.add(build.buf.validate.ValidateProto.oneof);
    registry.add(build.buf.validate.ValidateProto.field);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public static final int MESSAGE_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this message. By default,
   * no validation is performed against a message.
   * </pre>
   *
   * <code>extend .google.protobuf.MessageOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MessageOptions,
      build.buf.validate.MessageConstraints> message = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        build.buf.validate.MessageConstraints.class,
        build.buf.validate.MessageConstraints.getDefaultInstance());
  public static final int ONEOF_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this oneof. By default,
   * no validation is performed against a oneof.
   * </pre>
   *
   * <code>extend .google.protobuf.OneofOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.OneofOptions,
      build.buf.validate.OneofConstraints> oneof = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        build.buf.validate.OneofConstraints.class,
        build.buf.validate.OneofConstraints.getDefaultInstance());
  public static final int FIELD_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this field. By default,
   * no validation is performed against a field.
   * </pre>
   *
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      build.buf.validate.FieldConstraints> field = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        build.buf.validate.FieldConstraints.class,
        build.buf.validate.FieldConstraints.getDefaultInstance());
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_MessageConstraints_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_MessageConstraints_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_OneofConstraints_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_OneofConstraints_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_FieldConstraints_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_FieldConstraints_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_FloatRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_FloatRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_DoubleRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_DoubleRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Int32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_Int32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Int64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_Int64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_UInt32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_UInt32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_UInt64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_UInt64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SInt32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_SInt32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SInt64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_SInt64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Fixed32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_Fixed32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Fixed64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_Fixed64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SFixed32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_SFixed32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SFixed64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_SFixed64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_BoolRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_BoolRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_StringRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_StringRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_BytesRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_BytesRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_EnumRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_EnumRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_RepeatedRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_RepeatedRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_MapRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_MapRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_AnyRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_AnyRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_DurationRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_DurationRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_TimestampRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_TimestampRules_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033buf/validate/validate.proto\022\014buf.valid" +
      "ate\032\035buf/validate/expression.proto\032\037buf/" +
      "validate/priv/private.proto\032 google/prot" +
      "obuf/descriptor.proto\032\036google/protobuf/d" +
      "uration.proto\032\037google/protobuf/timestamp" +
      ".proto\"n\n\022MessageConstraints\022\037\n\010disabled" +
      "\030\001 \001(\010H\000R\010disabled\210\001\001\022*\n\003cel\030\003 \003(\0132\030.buf" +
      ".validate.ConstraintR\003celB\013\n\t_disabled\"@" +
      "\n\020OneofConstraints\022\037\n\010required\030\001 \001(\010H\000R\010" +
      "required\210\001\001B\013\n\t_required\"\365\t\n\020FieldConstr" +
      "aints\022*\n\003cel\030\027 \003(\0132\030.buf.validate.Constr" +
      "aintR\003cel\022\030\n\007skipped\030\030 \001(\010R\007skipped\022\032\n\010r" +
      "equired\030\031 \001(\010R\010required\022!\n\014ignore_empty\030" +
      "\032 \001(\010R\013ignoreEmpty\0220\n\005float\030\001 \001(\0132\030.buf." +
      "validate.FloatRulesH\000R\005float\0223\n\006double\030\002" +
      " \001(\0132\031.buf.validate.DoubleRulesH\000R\006doubl" +
      "e\0220\n\005int32\030\003 \001(\0132\030.buf.validate.Int32Rul" +
      "esH\000R\005int32\0220\n\005int64\030\004 \001(\0132\030.buf.validat" +
      "e.Int64RulesH\000R\005int64\0223\n\006uint32\030\005 \001(\0132\031." +
      "buf.validate.UInt32RulesH\000R\006uint32\0223\n\006ui" +
      "nt64\030\006 \001(\0132\031.buf.validate.UInt64RulesH\000R" +
      "\006uint64\0223\n\006sint32\030\007 \001(\0132\031.buf.validate.S" +
      "Int32RulesH\000R\006sint32\0223\n\006sint64\030\010 \001(\0132\031.b" +
      "uf.validate.SInt64RulesH\000R\006sint64\0226\n\007fix" +
      "ed32\030\t \001(\0132\032.buf.validate.Fixed32RulesH\000" +
      "R\007fixed32\0226\n\007fixed64\030\n \001(\0132\032.buf.validat" +
      "e.Fixed64RulesH\000R\007fixed64\0229\n\010sfixed32\030\013 " +
      "\001(\0132\033.buf.validate.SFixed32RulesH\000R\010sfix" +
      "ed32\0229\n\010sfixed64\030\014 \001(\0132\033.buf.validate.SF" +
      "ixed64RulesH\000R\010sfixed64\022-\n\004bool\030\r \001(\0132\027." +
      "buf.validate.BoolRulesH\000R\004bool\0223\n\006string" +
      "\030\016 \001(\0132\031.buf.validate.StringRulesH\000R\006str" +
      "ing\0220\n\005bytes\030\017 \001(\0132\030.buf.validate.BytesR" +
      "ulesH\000R\005bytes\022-\n\004enum\030\020 \001(\0132\027.buf.valida" +
      "te.EnumRulesH\000R\004enum\0229\n\010repeated\030\022 \001(\0132\033" +
      ".buf.validate.RepeatedRulesH\000R\010repeated\022" +
      "*\n\003map\030\023 \001(\0132\026.buf.validate.MapRulesH\000R\003" +
      "map\022*\n\003any\030\024 \001(\0132\026.buf.validate.AnyRules" +
      "H\000R\003any\0229\n\010duration\030\025 \001(\0132\033.buf.validate" +
      ".DurationRulesH\000R\010duration\022<\n\ttimestamp\030" +
      "\026 \001(\0132\034.buf.validate.TimestampRulesH\000R\tt" +
      "imestampB\006\n\004type\"\242\027\n\nFloatRules\022u\n\005const" +
      "\030\001 \001(\002BZ\302HW\nU\n\013float.const\032Fthis != rule" +
      "s.const ? \'value must equal %s\'.format([" +
      "rules.const]) : \'\'H\002R\005const\210\001\001\022\243\001\n\002lt\030\002 " +
      "\001(\002B\220\001\302H\214\001\n\211\001\n\010float.lt\032}!has(rules.gte)" +
      " && !has(rules.gt) && (this.isNan() || t" +
      "his >= rules.lt)? \'value must be less th" +
      "an %s\'.format([rules.lt]) : \'\'H\000R\002lt\022\264\001\n" +
      "\003lte\030\003 \001(\002B\237\001\302H\233\001\n\230\001\n\tfloat.lte\032\212\001!has(r" +
      "ules.gte) && !has(rules.gt) && (this.isN" +
      "an() || this > rules.lte)? \'value must b" +
      "e less than or equal to %s\'.format([rule" +
      "s.lte]) : \'\'H\000R\003lte\022\363\007\n\002gt\030\004 \001(\002B\340\007\302H\334\007\n" +
      "\215\001\n\010float.gt\032\200\001!has(rules.lt) && !has(ru" +
      "les.lte) && (this.isNan() || this <= rul" +
      "es.gt)? \'value must be greater than %s\'." +
      "format([rules.gt]) : \'\'\n\303\001\n\013float.gt_lt\032" +
      "\263\001has(rules.lt) && rules.lt >= rules.gt " +
      "&& (this.isNan() || this >= rules.lt || " +
      "this <= rules.gt)? \'value must be greate" +
      "r than %s and less than %s\'.format([rule" +
      "s.gt, rules.lt]) : \'\'\n\315\001\n\025float.gt_lt_ex" +
      "clusive\032\263\001has(rules.lt) && rules.lt < ru" +
      "les.gt && (this.isNan() || (rules.lt <= " +
      "this && this <= rules.gt))? \'value must " +
      "be greater than %s or less than %s\'.form" +
      "at([rules.gt, rules.lt]) : \'\'\n\323\001\n\014float." +
      "gt_lte\032\302\001has(rules.lte) && rules.lte >= " +
      "rules.gt && (this.isNan() || this > rule" +
      "s.lte || this <= rules.gt)? \'value must " +
      "be greater than %s and less than or equa" +
      "l to %s\'.format([rules.gt, rules.lte]) :" +
      " \'\'\n\335\001\n\026float.gt_lte_exclusive\032\302\001has(rul" +
      "es.lte) && rules.lte < rules.gt && (this" +
      ".isNan() || (rules.lte < this && this <=" +
      " rules.gt))? \'value must be greater than" +
      " %s or less than or equal to %s\'.format(" +
      "[rules.gt, rules.lte]) : \'\'H\001R\002gt\022\277\010\n\003gt" +
      "e\030\005 \001(\002B\252\010\302H\246\010\n\233\001\n\tfloat.gte\032\215\001!has(rule" +
      "s.lt) && !has(rules.lte) && (this.isNan(" +
      ") || this < rules.gte)? \'value must be g" +
      "reater than or equal to %s\'.format([rule" +
      "s.gte]) : \'\'\n\322\001\n\014float.gte_lt\032\301\001has(rule" +
      "s.lt) && rules.lt >= rules.gte && (this." +
      "isNan() || this >= rules.lt || this < ru" +
      "les.gte)? \'value must be greater than or" +
      " equal to %s and less than %s\'.format([r" +
      "ules.gte, rules.lt]) : \'\'\n\334\001\n\026float.gte_" +
      "lt_exclusive\032\301\001has(rules.lt) && rules.lt" +
      " < rules.gte && (this.isNan() || (rules." +
      "lt <= this && this < rules.gte))? \'value" +
      " must be greater than or equal to %s or " +
      "less than %s\'.format([rules.gte, rules.l" +
      "t]) : \'\'\n\342\001\n\rfloat.gte_lte\032\320\001has(rules.l" +
      "te) && rules.lte >= rules.gte && (this.i" +
      "sNan() || this > rules.lte || this < rul" +
      "es.gte)? \'value must be greater than or " +
      "equal to %s and less than or equal to %s" +
      "\'.format([rules.gte, rules.lte]) : \'\'\n\354\001" +
      "\n\027float.gte_lte_exclusive\032\320\001has(rules.lt" +
      "e) && rules.lte < rules.gte && (this.isN" +
      "an() || (rules.lte < this && this < rule" +
      "s.gte))? \'value must be greater than or " +
      "equal to %s or less than or equal to %s\'" +
      ".format([rules.gte, rules.lte]) : \'\'H\001R\003" +
      "gte\022y\n\002in\030\006 \003(\002Bi\302Hf\nd\n\010float.in\032X!(this" +
      " in dyn(rules)[\'in\']) ? \'value must be i" +
      "n list %s\'.format([dyn(rules)[\'in\']]) : " +
      "\'\'R\002in\022}\n\006not_in\030\007 \003(\002Bf\302Hc\na\n\014float.not" +
      "_in\032Qthis in rules.not_in ? \'value must " +
      "not be in list %s\'.format([rules.not_in]" +
      ") : \'\'R\005notIn\022g\n\006finite\030\010 \001(\010BO\302HL\nJ\n\014fl" +
      "oat.finite\032:this.isNan() || this.isInf()" +
      " ? \'value must be finite\' : \'\'R\006finiteB\013" +
      "\n\tless_thanB\016\n\014greater_thanB\010\n\006_const\"\263\027" +
      "\n\013DoubleRules\022v\n\005const\030\001 \001(\001B[\302HX\nV\n\014dou" +
      "ble.const\032Fthis != rules.const ? \'value " +
      "must equal %s\'.format([rules.const]) : \'" +
      "\'H\002R\005const\210\001\001\022\244\001\n\002lt\030\002 \001(\001B\221\001\302H\215\001\n\212\001\n\tdo" +
      "uble.lt\032}!has(rules.gte) && !has(rules.g" +
      "t) && (this.isNan() || this >= rules.lt)" +
      "? \'value must be less than %s\'.format([r" +
      "ules.lt]) : \'\'H\000R\002lt\022\265\001\n\003lte\030\003 \001(\001B\240\001\302H\234" +
      "\001\n\231\001\n\ndouble.lte\032\212\001!has(rules.gte) && !h" +
      "as(rules.gt) && (this.isNan() || this > " +
      "rules.lte)? \'value must be less than or " +
      "equal to %s\'.format([rules.lte]) : \'\'H\000R" +
      "\003lte\022\370\007\n\002gt\030\004 \001(\001B\345\007\302H\341\007\n\216\001\n\tdouble.gt\032\200" +
      "\001!has(rules.lt) && !has(rules.lte) && (t" +
      "his.isNan() || this <= rules.gt)? \'value" +
      " must be greater than %s\'.format([rules." +
      "gt]) : \'\'\n\304\001\n\014double.gt_lt\032\263\001has(rules.l" +
      "t) && rules.lt >= rules.gt && (this.isNa" +
      "n() || this >= rules.lt || this <= rules" +
      ".gt)? \'value must be greater than %s and" +
      " less than %s\'.format([rules.gt, rules.l" +
      "t]) : \'\'\n\316\001\n\026double.gt_lt_exclusive\032\263\001ha" +
      "s(rules.lt) && rules.lt < rules.gt && (t" +
      "his.isNan() || (rules.lt <= this && this" +
      " <= rules.gt))? \'value must be greater t" +
      "han %s or less than %s\'.format([rules.gt" +
      ", rules.lt]) : \'\'\n\324\001\n\rdouble.gt_lte\032\302\001ha" +
      "s(rules.lte) && rules.lte >= rules.gt &&" +
      " (this.isNan() || this > rules.lte || th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s and less than or equal to %s\'.fo" +
      "rmat([rules.gt, rules.lte]) : \'\'\n\336\001\n\027dou" +
      "ble.gt_lte_exclusive\032\302\001has(rules.lte) &&" +
      " rules.lte < rules.gt && (this.isNan() |" +
      "| (rules.lte < this && this <= rules.gt)" +
      ")? \'value must be greater than %s or les" +
      "s than or equal to %s\'.format([rules.gt," +
      " rules.lte]) : \'\'H\001R\002gt\022\304\010\n\003gte\030\005 \001(\001B\257\010" +
      "\302H\253\010\n\234\001\n\ndouble.gte\032\215\001!has(rules.lt) && " +
      "!has(rules.lte) && (this.isNan() || this" +
      " < rules.gte)? \'value must be greater th" +
      "an or equal to %s\'.format([rules.gte]) :" +
      " \'\'\n\323\001\n\rdouble.gte_lt\032\301\001has(rules.lt) &&" +
      " rules.lt >= rules.gte && (this.isNan() " +
      "|| this >= rules.lt || this < rules.gte)" +
      "? \'value must be greater than or equal t" +
      "o %s and less than %s\'.format([rules.gte" +
      ", rules.lt]) : \'\'\n\335\001\n\027double.gte_lt_excl" +
      "usive\032\301\001has(rules.lt) && rules.lt < rule" +
      "s.gte && (this.isNan() || (rules.lt <= t" +
      "his && this < rules.gte))? \'value must b" +
      "e greater than or equal to %s or less th" +
      "an %s\'.format([rules.gte, rules.lt]) : \'" +
      "\'\n\343\001\n\016double.gte_lte\032\320\001has(rules.lte) &&" +
      " rules.lte >= rules.gte && (this.isNan()" +
      " || this > rules.lte || this < rules.gte" +
      ")? \'value must be greater than or equal " +
      "to %s and less than or equal to %s\'.form" +
      "at([rules.gte, rules.lte]) : \'\'\n\355\001\n\030doub" +
      "le.gte_lte_exclusive\032\320\001has(rules.lte) &&" +
      " rules.lte < rules.gte && (this.isNan() " +
      "|| (rules.lte < this && this < rules.gte" +
      "))? \'value must be greater than or equal" +
      " to %s or less than or equal to %s\'.form" +
      "at([rules.gte, rules.lte]) : \'\'H\001R\003gte\022z" +
      "\n\002in\030\006 \003(\001Bj\302Hg\ne\n\tdouble.in\032X!(this in " +
      "dyn(rules)[\'in\']) ? \'value must be in li" +
      "st %s\'.format([dyn(rules)[\'in\']]) : \'\'R\002" +
      "in\022~\n\006not_in\030\007 \003(\001Bg\302Hd\nb\n\rdouble.not_in" +
      "\032Qthis in rules.not_in ? \'value must not" +
      " be in list %s\'.format([rules.not_in]) :" +
      " \'\'R\005notIn\022h\n\006finite\030\010 \001(\010BP\302HM\nK\n\rdoubl" +
      "e.finite\032:this.isNan() || this.isInf() ?" +
      " \'value must be finite\' : \'\'R\006finiteB\013\n\t" +
      "less_thanB\016\n\014greater_thanB\010\n\006_const\"\342\024\n\n" +
      "Int32Rules\022u\n\005const\030\001 \001(\005BZ\302HW\nU\n\013int32." +
      "const\032Fthis != rules.const ? \'value must" +
      " equal %s\'.format([rules.const]) : \'\'H\002R" +
      "\005const\210\001\001\022\216\001\n\002lt\030\002 \001(\005B|\302Hy\nw\n\010int32.lt\032" +
      "k!has(rules.gte) && !has(rules.gt) && th" +
      "is >= rules.lt? \'value must be less than" +
      " %s\'.format([rules.lt]) : \'\'H\000R\002lt\022\241\001\n\003l" +
      "te\030\003 \001(\005B\214\001\302H\210\001\n\205\001\n\tint32.lte\032x!has(rule" +
      "s.gte) && !has(rules.gt) && this > rules" +
      ".lte? \'value must be less than or equal " +
      "to %s\'.format([rules.lte]) : \'\'H\000R\003lte\022\233" +
      "\007\n\002gt\030\004 \001(\005B\210\007\302H\204\007\nz\n\010int32.gt\032n!has(rul" +
      "es.lt) && !has(rules.lte) && this <= rul" +
      "es.gt? \'value must be greater than %s\'.f" +
      "ormat([rules.gt]) : \'\'\n\263\001\n\013int32.gt_lt\032\243" +
      "\001has(rules.lt) && rules.lt >= rules.gt &" +
      "& (this >= rules.lt || this <= rules.gt)" +
      "? \'value must be greater than %s and les" +
      "s than %s\'.format([rules.gt, rules.lt]) " +
      ": \'\'\n\273\001\n\025int32.gt_lt_exclusive\032\241\001has(rul" +
      "es.lt) && rules.lt < rules.gt && (rules." +
      "lt <= this && this <= rules.gt)? \'value " +
      "must be greater than %s or less than %s\'" +
      ".format([rules.gt, rules.lt]) : \'\'\n\303\001\n\014i" +
      "nt32.gt_lte\032\262\001has(rules.lte) && rules.lt" +
      "e >= rules.gt && (this > rules.lte || th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s and less than or equal to %s\'.fo" +
      "rmat([rules.gt, rules.lte]) : \'\'\n\313\001\n\026int" +
      "32.gt_lte_exclusive\032\260\001has(rules.lte) && " +
      "rules.lte < rules.gt && (rules.lte < thi" +
      "s && this <= rules.gt)? \'value must be g" +
      "reater than %s or less than or equal to " +
      "%s\'.format([rules.gt, rules.lte]) : \'\'H\001" +
      "R\002gt\022\350\007\n\003gte\030\005 \001(\005B\323\007\302H\317\007\n\210\001\n\tint32.gte\032" +
      "{!has(rules.lt) && !has(rules.lte) && th" +
      "is < rules.gte? \'value must be greater t" +
      "han or equal to %s\'.format([rules.gte]) " +
      ": \'\'\n\302\001\n\014int32.gte_lt\032\261\001has(rules.lt) &&" +
      " rules.lt >= rules.gte && (this >= rules" +
      ".lt || this < rules.gte)? \'value must be" +
      " greater than or equal to %s and less th" +
      "an %s\'.format([rules.gte, rules.lt]) : \'" +
      "\'\n\312\001\n\026int32.gte_lt_exclusive\032\257\001has(rules" +
      ".lt) && rules.lt < rules.gte && (rules.l" +
      "t <= this && this < rules.gte)? \'value m" +
      "ust be greater than or equal to %s or le" +
      "ss than %s\'.format([rules.gte, rules.lt]" +
      ") : \'\'\n\322\001\n\rint32.gte_lte\032\300\001has(rules.lte" +
      ") && rules.lte >= rules.gte && (this > r" +
      "ules.lte || this < rules.gte)? \'value mu" +
      "st be greater than or equal to %s and le" +
      "ss than or equal to %s\'.format([rules.gt" +
      "e, rules.lte]) : \'\'\n\332\001\n\027int32.gte_lte_ex" +
      "clusive\032\276\001has(rules.lte) && rules.lte < " +
      "rules.gte && (rules.lte < this && this <" +
      " rules.gte)? \'value must be greater than" +
      " or equal to %s or less than or equal to" +
      " %s\'.format([rules.gte, rules.lte]) : \'\'" +
      "H\001R\003gte\022y\n\002in\030\006 \003(\005Bi\302Hf\nd\n\010int32.in\032X!(" +
      "this in dyn(rules)[\'in\']) ? \'value must " +
      "be in list %s\'.format([dyn(rules)[\'in\']]" +
      ") : \'\'R\002in\022}\n\006not_in\030\007 \003(\005Bf\302Hc\na\n\014int32" +
      ".not_in\032Qthis in rules.not_in ? \'value m" +
      "ust not be in list %s\'.format([rules.not" +
      "_in]) : \'\'R\005notInB\013\n\tless_thanB\016\n\014greate" +
      "r_thanB\010\n\006_const\"\342\024\n\nInt64Rules\022u\n\005const" +
      "\030\001 \001(\003BZ\302HW\nU\n\013int64.const\032Fthis != rule" +
      "s.const ? \'value must equal %s\'.format([" +
      "rules.const]) : \'\'H\002R\005const\210\001\001\022\216\001\n\002lt\030\002 " +
      "\001(\003B|\302Hy\nw\n\010int64.lt\032k!has(rules.gte) &&" +
      " !has(rules.gt) && this >= rules.lt? \'va" +
      "lue must be less than %s\'.format([rules." +
      "lt]) : \'\'H\000R\002lt\022\241\001\n\003lte\030\003 \001(\003B\214\001\302H\210\001\n\205\001\n" +
      "\tint64.lte\032x!has(rules.gte) && !has(rule" +
      "s.gt) && this > rules.lte? \'value must b" +
      "e less than or equal to %s\'.format([rule" +
      "s.lte]) : \'\'H\000R\003lte\022\233\007\n\002gt\030\004 \001(\003B\210\007\302H\204\007\n" +
      "z\n\010int64.gt\032n!has(rules.lt) && !has(rule" +
      "s.lte) && this <= rules.gt? \'value must " +
      "be greater than %s\'.format([rules.gt]) :" +
      " \'\'\n\263\001\n\013int64.gt_lt\032\243\001has(rules.lt) && r" +
      "ules.lt >= rules.gt && (this >= rules.lt" +
      " || this <= rules.gt)? \'value must be gr" +
      "eater than %s and less than %s\'.format([" +
      "rules.gt, rules.lt]) : \'\'\n\273\001\n\025int64.gt_l" +
      "t_exclusive\032\241\001has(rules.lt) && rules.lt " +
      "< rules.gt && (rules.lt <= this && this " +
      "<= rules.gt)? \'value must be greater tha" +
      "n %s or less than %s\'.format([rules.gt, " +
      "rules.lt]) : \'\'\n\303\001\n\014int64.gt_lte\032\262\001has(r" +
      "ules.lte) && rules.lte >= rules.gt && (t" +
      "his > rules.lte || this <= rules.gt)? \'v" +
      "alue must be greater than %s and less th" +
      "an or equal to %s\'.format([rules.gt, rul" +
      "es.lte]) : \'\'\n\313\001\n\026int64.gt_lte_exclusive" +
      "\032\260\001has(rules.lte) && rules.lte < rules.g" +
      "t && (rules.lte < this && this <= rules." +
      "gt)? \'value must be greater than %s or l" +
      "ess than or equal to %s\'.format([rules.g" +
      "t, rules.lte]) : \'\'H\001R\002gt\022\350\007\n\003gte\030\005 \001(\003B" +
      "\323\007\302H\317\007\n\210\001\n\tint64.gte\032{!has(rules.lt) && " +
      "!has(rules.lte) && this < rules.gte? \'va" +
      "lue must be greater than or equal to %s\'" +
      ".format([rules.gte]) : \'\'\n\302\001\n\014int64.gte_" +
      "lt\032\261\001has(rules.lt) && rules.lt >= rules." +
      "gte && (this >= rules.lt || this < rules" +
      ".gte)? \'value must be greater than or eq" +
      "ual to %s and less than %s\'.format([rule" +
      "s.gte, rules.lt]) : \'\'\n\312\001\n\026int64.gte_lt_" +
      "exclusive\032\257\001has(rules.lt) && rules.lt < " +
      "rules.gte && (rules.lt <= this && this <" +
      " rules.gte)? \'value must be greater than" +
      " or equal to %s or less than %s\'.format(" +
      "[rules.gte, rules.lt]) : \'\'\n\322\001\n\rint64.gt" +
      "e_lte\032\300\001has(rules.lte) && rules.lte >= r" +
      "ules.gte && (this > rules.lte || this < " +
      "rules.gte)? \'value must be greater than " +
      "or equal to %s and less than or equal to" +
      " %s\'.format([rules.gte, rules.lte]) : \'\'" +
      "\n\332\001\n\027int64.gte_lte_exclusive\032\276\001has(rules" +
      ".lte) && rules.lte < rules.gte && (rules" +
      ".lte < this && this < rules.gte)? \'value" +
      " must be greater than or equal to %s or " +
      "less than or equal to %s\'.format([rules." +
      "gte, rules.lte]) : \'\'H\001R\003gte\022y\n\002in\030\006 \003(\003" +
      "Bi\302Hf\nd\n\010int64.in\032X!(this in dyn(rules)[" +
      "\'in\']) ? \'value must be in list %s\'.form" +
      "at([dyn(rules)[\'in\']]) : \'\'R\002in\022}\n\006not_i" +
      "n\030\007 \003(\003Bf\302Hc\na\n\014int64.not_in\032Qthis in ru" +
      "les.not_in ? \'value must not be in list " +
      "%s\'.format([rules.not_in]) : \'\'R\005notInB\013" +
      "\n\tless_thanB\016\n\014greater_thanB\010\n\006_const\"\362\024" +
      "\n\013UInt32Rules\022v\n\005const\030\001 \001(\rB[\302HX\nV\n\014uin" +
      "t32.const\032Fthis != rules.const ? \'value " +
      "must equal %s\'.format([rules.const]) : \'" +
      "\'H\002R\005const\210\001\001\022\217\001\n\002lt\030\002 \001(\rB}\302Hz\nx\n\tuint3" +
      "2.lt\032k!has(rules.gte) && !has(rules.gt) " +
      "&& this >= rules.lt? \'value must be less" +
      " than %s\'.format([rules.lt]) : \'\'H\000R\002lt\022" +
      "\242\001\n\003lte\030\003 \001(\rB\215\001\302H\211\001\n\206\001\n\nuint32.lte\032x!ha" +
      "s(rules.gte) && !has(rules.gt) && this >" +
      " rules.lte? \'value must be less than or " +
      "equal to %s\'.format([rules.lte]) : \'\'H\000R" +
      "\003lte\022\240\007\n\002gt\030\004 \001(\rB\215\007\302H\211\007\n{\n\tuint32.gt\032n!" +
      "has(rules.lt) && !has(rules.lte) && this" +
      " <= rules.gt? \'value must be greater tha" +
      "n %s\'.format([rules.gt]) : \'\'\n\264\001\n\014uint32" +
      ".gt_lt\032\243\001has(rules.lt) && rules.lt >= ru" +
      "les.gt && (this >= rules.lt || this <= r" +
      "ules.gt)? \'value must be greater than %s" +
      " and less than %s\'.format([rules.gt, rul" +
      "es.lt]) : \'\'\n\274\001\n\026uint32.gt_lt_exclusive\032" +
      "\241\001has(rules.lt) && rules.lt < rules.gt &" +
      "& (rules.lt <= this && this <= rules.gt)" +
      "? \'value must be greater than %s or less" +
      " than %s\'.format([rules.gt, rules.lt]) :" +
      " \'\'\n\304\001\n\ruint32.gt_lte\032\262\001has(rules.lte) &" +
      "& rules.lte >= rules.gt && (this > rules" +
      ".lte || this <= rules.gt)? \'value must b" +
      "e greater than %s and less than or equal" +
      " to %s\'.format([rules.gt, rules.lte]) : " +
      "\'\'\n\314\001\n\027uint32.gt_lte_exclusive\032\260\001has(rul" +
      "es.lte) && rules.lte < rules.gt && (rule" +
      "s.lte < this && this <= rules.gt)? \'valu" +
      "e must be greater than %s or less than o" +
      "r equal to %s\'.format([rules.gt, rules.l" +
      "te]) : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\rB\330\007\302H\324\007\n\211\001\n" +
      "\nuint32.gte\032{!has(rules.lt) && !has(rule" +
      "s.lte) && this < rules.gte? \'value must " +
      "be greater than or equal to %s\'.format([" +
      "rules.gte]) : \'\'\n\303\001\n\ruint32.gte_lt\032\261\001has" +
      "(rules.lt) && rules.lt >= rules.gte && (" +
      "this >= rules.lt || this < rules.gte)? \'" +
      "value must be greater than or equal to %" +
      "s and less than %s\'.format([rules.gte, r" +
      "ules.lt]) : \'\'\n\313\001\n\027uint32.gte_lt_exclusi" +
      "ve\032\257\001has(rules.lt) && rules.lt < rules.g" +
      "te && (rules.lt <= this && this < rules." +
      "gte)? \'value must be greater than or equ" +
      "al to %s or less than %s\'.format([rules." +
      "gte, rules.lt]) : \'\'\n\323\001\n\016uint32.gte_lte\032" +
      "\300\001has(rules.lte) && rules.lte >= rules.g" +
      "te && (this > rules.lte || this < rules." +
      "gte)? \'value must be greater than or equ" +
      "al to %s and less than or equal to %s\'.f" +
      "ormat([rules.gte, rules.lte]) : \'\'\n\333\001\n\030u" +
      "int32.gte_lte_exclusive\032\276\001has(rules.lte)" +
      " && rules.lte < rules.gte && (rules.lte " +
      "< this && this < rules.gte)? \'value must" +
      " be greater than or equal to %s or less " +
      "than or equal to %s\'.format([rules.gte, " +
      "rules.lte]) : \'\'H\001R\003gte\022z\n\002in\030\006 \003(\rBj\302Hg" +
      "\ne\n\tuint32.in\032X!(this in dyn(rules)[\'in\'" +
      "]) ? \'value must be in list %s\'.format([" +
      "dyn(rules)[\'in\']]) : \'\'R\002in\022~\n\006not_in\030\007 " +
      "\003(\rBg\302Hd\nb\n\ruint32.not_in\032Qthis in rules" +
      ".not_in ? \'value must not be in list %s\'" +
      ".format([rules.not_in]) : \'\'R\005notInB\013\n\tl" +
      "ess_thanB\016\n\014greater_thanB\010\n\006_const\"\362\024\n\013U" +
      "Int64Rules\022v\n\005const\030\001 \001(\004B[\302HX\nV\n\014uint64" +
      ".const\032Fthis != rules.const ? \'value mus" +
      "t equal %s\'.format([rules.const]) : \'\'H\002" +
      "R\005const\210\001\001\022\217\001\n\002lt\030\002 \001(\004B}\302Hz\nx\n\tuint64.l" +
      "t\032k!has(rules.gte) && !has(rules.gt) && " +
      "this >= rules.lt? \'value must be less th" +
      "an %s\'.format([rules.lt]) : \'\'H\000R\002lt\022\242\001\n" +
      "\003lte\030\003 \001(\004B\215\001\302H\211\001\n\206\001\n\nuint64.lte\032x!has(r" +
      "ules.gte) && !has(rules.gt) && this > ru",
      "les.lte? \'value must be less than or equ" +
      "al to %s\'.format([rules.lte]) : \'\'H\000R\003lt" +
      "e\022\240\007\n\002gt\030\004 \001(\004B\215\007\302H\211\007\n{\n\tuint64.gt\032n!has" +
      "(rules.lt) && !has(rules.lte) && this <=" +
      " rules.gt? \'value must be greater than %" +
      "s\'.format([rules.gt]) : \'\'\n\264\001\n\014uint64.gt" +
      "_lt\032\243\001has(rules.lt) && rules.lt >= rules" +
      ".gt && (this >= rules.lt || this <= rule" +
      "s.gt)? \'value must be greater than %s an" +
      "d less than %s\'.format([rules.gt, rules." +
      "lt]) : \'\'\n\274\001\n\026uint64.gt_lt_exclusive\032\241\001h" +
      "as(rules.lt) && rules.lt < rules.gt && (" +
      "rules.lt <= this && this <= rules.gt)? \'" +
      "value must be greater than %s or less th" +
      "an %s\'.format([rules.gt, rules.lt]) : \'\'" +
      "\n\304\001\n\ruint64.gt_lte\032\262\001has(rules.lte) && r" +
      "ules.lte >= rules.gt && (this > rules.lt" +
      "e || this <= rules.gt)? \'value must be g" +
      "reater than %s and less than or equal to" +
      " %s\'.format([rules.gt, rules.lte]) : \'\'\n" +
      "\314\001\n\027uint64.gt_lte_exclusive\032\260\001has(rules." +
      "lte) && rules.lte < rules.gt && (rules.l" +
      "te < this && this <= rules.gt)? \'value m" +
      "ust be greater than %s or less than or e" +
      "qual to %s\'.format([rules.gt, rules.lte]" +
      ") : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\004B\330\007\302H\324\007\n\211\001\n\nui" +
      "nt64.gte\032{!has(rules.lt) && !has(rules.l" +
      "te) && this < rules.gte? \'value must be " +
      "greater than or equal to %s\'.format([rul" +
      "es.gte]) : \'\'\n\303\001\n\ruint64.gte_lt\032\261\001has(ru" +
      "les.lt) && rules.lt >= rules.gte && (thi" +
      "s >= rules.lt || this < rules.gte)? \'val" +
      "ue must be greater than or equal to %s a" +
      "nd less than %s\'.format([rules.gte, rule" +
      "s.lt]) : \'\'\n\313\001\n\027uint64.gte_lt_exclusive\032" +
      "\257\001has(rules.lt) && rules.lt < rules.gte " +
      "&& (rules.lt <= this && this < rules.gte" +
      ")? \'value must be greater than or equal " +
      "to %s or less than %s\'.format([rules.gte" +
      ", rules.lt]) : \'\'\n\323\001\n\016uint64.gte_lte\032\300\001h" +
      "as(rules.lte) && rules.lte >= rules.gte " +
      "&& (this > rules.lte || this < rules.gte" +
      ")? \'value must be greater than or equal " +
      "to %s and less than or equal to %s\'.form" +
      "at([rules.gte, rules.lte]) : \'\'\n\333\001\n\030uint" +
      "64.gte_lte_exclusive\032\276\001has(rules.lte) &&" +
      " rules.lte < rules.gte && (rules.lte < t" +
      "his && this < rules.gte)? \'value must be" +
      " greater than or equal to %s or less tha" +
      "n or equal to %s\'.format([rules.gte, rul" +
      "es.lte]) : \'\'H\001R\003gte\022z\n\002in\030\006 \003(\004Bj\302Hg\ne\n" +
      "\tuint64.in\032X!(this in dyn(rules)[\'in\']) " +
      "? \'value must be in list %s\'.format([dyn" +
      "(rules)[\'in\']]) : \'\'R\002in\022~\n\006not_in\030\007 \003(\004" +
      "Bg\302Hd\nb\n\ruint64.not_in\032Qthis in rules.no" +
      "t_in ? \'value must not be in list %s\'.fo" +
      "rmat([rules.not_in]) : \'\'R\005notInB\013\n\tless" +
      "_thanB\016\n\014greater_thanB\010\n\006_const\"\362\024\n\013SInt" +
      "32Rules\022v\n\005const\030\001 \001(\021B[\302HX\nV\n\014sint32.co" +
      "nst\032Fthis != rules.const ? \'value must e" +
      "qual %s\'.format([rules.const]) : \'\'H\002R\005c" +
      "onst\210\001\001\022\217\001\n\002lt\030\002 \001(\021B}\302Hz\nx\n\tsint32.lt\032k" +
      "!has(rules.gte) && !has(rules.gt) && thi" +
      "s >= rules.lt? \'value must be less than " +
      "%s\'.format([rules.lt]) : \'\'H\000R\002lt\022\242\001\n\003lt" +
      "e\030\003 \001(\021B\215\001\302H\211\001\n\206\001\n\nsint32.lte\032x!has(rule" +
      "s.gte) && !has(rules.gt) && this > rules" +
      ".lte? \'value must be less than or equal " +
      "to %s\'.format([rules.lte]) : \'\'H\000R\003lte\022\240" +
      "\007\n\002gt\030\004 \001(\021B\215\007\302H\211\007\n{\n\tsint32.gt\032n!has(ru" +
      "les.lt) && !has(rules.lte) && this <= ru" +
      "les.gt? \'value must be greater than %s\'." +
      "format([rules.gt]) : \'\'\n\264\001\n\014sint32.gt_lt" +
      "\032\243\001has(rules.lt) && rules.lt >= rules.gt" +
      " && (this >= rules.lt || this <= rules.g" +
      "t)? \'value must be greater than %s and l" +
      "ess than %s\'.format([rules.gt, rules.lt]" +
      ") : \'\'\n\274\001\n\026sint32.gt_lt_exclusive\032\241\001has(" +
      "rules.lt) && rules.lt < rules.gt && (rul" +
      "es.lt <= this && this <= rules.gt)? \'val" +
      "ue must be greater than %s or less than " +
      "%s\'.format([rules.gt, rules.lt]) : \'\'\n\304\001" +
      "\n\rsint32.gt_lte\032\262\001has(rules.lte) && rule" +
      "s.lte >= rules.gt && (this > rules.lte |" +
      "| this <= rules.gt)? \'value must be grea" +
      "ter than %s and less than or equal to %s" +
      "\'.format([rules.gt, rules.lte]) : \'\'\n\314\001\n" +
      "\027sint32.gt_lte_exclusive\032\260\001has(rules.lte" +
      ") && rules.lte < rules.gt && (rules.lte " +
      "< this && this <= rules.gt)? \'value must" +
      " be greater than %s or less than or equa" +
      "l to %s\'.format([rules.gt, rules.lte]) :" +
      " \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\021B\330\007\302H\324\007\n\211\001\n\nsint3" +
      "2.gte\032{!has(rules.lt) && !has(rules.lte)" +
      " && this < rules.gte? \'value must be gre" +
      "ater than or equal to %s\'.format([rules." +
      "gte]) : \'\'\n\303\001\n\rsint32.gte_lt\032\261\001has(rules" +
      ".lt) && rules.lt >= rules.gte && (this >" +
      "= rules.lt || this < rules.gte)? \'value " +
      "must be greater than or equal to %s and " +
      "less than %s\'.format([rules.gte, rules.l" +
      "t]) : \'\'\n\313\001\n\027sint32.gte_lt_exclusive\032\257\001h" +
      "as(rules.lt) && rules.lt < rules.gte && " +
      "(rules.lt <= this && this < rules.gte)? " +
      "\'value must be greater than or equal to " +
      "%s or less than %s\'.format([rules.gte, r" +
      "ules.lt]) : \'\'\n\323\001\n\016sint32.gte_lte\032\300\001has(" +
      "rules.lte) && rules.lte >= rules.gte && " +
      "(this > rules.lte || this < rules.gte)? " +
      "\'value must be greater than or equal to " +
      "%s and less than or equal to %s\'.format(" +
      "[rules.gte, rules.lte]) : \'\'\n\333\001\n\030sint32." +
      "gte_lte_exclusive\032\276\001has(rules.lte) && ru" +
      "les.lte < rules.gte && (rules.lte < this" +
      " && this < rules.gte)? \'value must be gr" +
      "eater than or equal to %s or less than o" +
      "r equal to %s\'.format([rules.gte, rules." +
      "lte]) : \'\'H\001R\003gte\022z\n\002in\030\006 \003(\021Bj\302Hg\ne\n\tsi" +
      "nt32.in\032X!(this in dyn(rules)[\'in\']) ? \'" +
      "value must be in list %s\'.format([dyn(ru" +
      "les)[\'in\']]) : \'\'R\002in\022~\n\006not_in\030\007 \003(\021Bg\302" +
      "Hd\nb\n\rsint32.not_in\032Qthis in rules.not_i" +
      "n ? \'value must not be in list %s\'.forma" +
      "t([rules.not_in]) : \'\'R\005notInB\013\n\tless_th" +
      "anB\016\n\014greater_thanB\010\n\006_const\"\362\024\n\013SInt64R" +
      "ules\022v\n\005const\030\001 \001(\022B[\302HX\nV\n\014sint64.const" +
      "\032Fthis != rules.const ? \'value must equa" +
      "l %s\'.format([rules.const]) : \'\'H\002R\005cons" +
      "t\210\001\001\022\217\001\n\002lt\030\002 \001(\022B}\302Hz\nx\n\tsint64.lt\032k!ha" +
      "s(rules.gte) && !has(rules.gt) && this >" +
      "= rules.lt? \'value must be less than %s\'" +
      ".format([rules.lt]) : \'\'H\000R\002lt\022\242\001\n\003lte\030\003" +
      " \001(\022B\215\001\302H\211\001\n\206\001\n\nsint64.lte\032x!has(rules.g" +
      "te) && !has(rules.gt) && this > rules.lt" +
      "e? \'value must be less than or equal to " +
      "%s\'.format([rules.lte]) : \'\'H\000R\003lte\022\240\007\n\002" +
      "gt\030\004 \001(\022B\215\007\302H\211\007\n{\n\tsint64.gt\032n!has(rules" +
      ".lt) && !has(rules.lte) && this <= rules" +
      ".gt? \'value must be greater than %s\'.for" +
      "mat([rules.gt]) : \'\'\n\264\001\n\014sint64.gt_lt\032\243\001" +
      "has(rules.lt) && rules.lt >= rules.gt &&" +
      " (this >= rules.lt || this <= rules.gt)?" +
      " \'value must be greater than %s and less" +
      " than %s\'.format([rules.gt, rules.lt]) :" +
      " \'\'\n\274\001\n\026sint64.gt_lt_exclusive\032\241\001has(rul" +
      "es.lt) && rules.lt < rules.gt && (rules." +
      "lt <= this && this <= rules.gt)? \'value " +
      "must be greater than %s or less than %s\'" +
      ".format([rules.gt, rules.lt]) : \'\'\n\304\001\n\rs" +
      "int64.gt_lte\032\262\001has(rules.lte) && rules.l" +
      "te >= rules.gt && (this > rules.lte || t" +
      "his <= rules.gt)? \'value must be greater" +
      " than %s and less than or equal to %s\'.f" +
      "ormat([rules.gt, rules.lte]) : \'\'\n\314\001\n\027si" +
      "nt64.gt_lte_exclusive\032\260\001has(rules.lte) &" +
      "& rules.lte < rules.gt && (rules.lte < t" +
      "his && this <= rules.gt)? \'value must be" +
      " greater than %s or less than or equal t" +
      "o %s\'.format([rules.gt, rules.lte]) : \'\'" +
      "H\001R\002gt\022\355\007\n\003gte\030\005 \001(\022B\330\007\302H\324\007\n\211\001\n\nsint64.g" +
      "te\032{!has(rules.lt) && !has(rules.lte) &&" +
      " this < rules.gte? \'value must be greate" +
      "r than or equal to %s\'.format([rules.gte" +
      "]) : \'\'\n\303\001\n\rsint64.gte_lt\032\261\001has(rules.lt" +
      ") && rules.lt >= rules.gte && (this >= r" +
      "ules.lt || this < rules.gte)? \'value mus" +
      "t be greater than or equal to %s and les" +
      "s than %s\'.format([rules.gte, rules.lt])" +
      " : \'\'\n\313\001\n\027sint64.gte_lt_exclusive\032\257\001has(" +
      "rules.lt) && rules.lt < rules.gte && (ru" +
      "les.lt <= this && this < rules.gte)? \'va" +
      "lue must be greater than or equal to %s " +
      "or less than %s\'.format([rules.gte, rule" +
      "s.lt]) : \'\'\n\323\001\n\016sint64.gte_lte\032\300\001has(rul" +
      "es.lte) && rules.lte >= rules.gte && (th" +
      "is > rules.lte || this < rules.gte)? \'va" +
      "lue must be greater than or equal to %s " +
      "and less than or equal to %s\'.format([ru" +
      "les.gte, rules.lte]) : \'\'\n\333\001\n\030sint64.gte" +
      "_lte_exclusive\032\276\001has(rules.lte) && rules" +
      ".lte < rules.gte && (rules.lte < this &&" +
      " this < rules.gte)? \'value must be great" +
      "er than or equal to %s or less than or e" +
      "qual to %s\'.format([rules.gte, rules.lte" +
      "]) : \'\'H\001R\003gte\022z\n\002in\030\006 \003(\022Bj\302Hg\ne\n\tsint6" +
      "4.in\032X!(this in dyn(rules)[\'in\']) ? \'val" +
      "ue must be in list %s\'.format([dyn(rules" +
      ")[\'in\']]) : \'\'R\002in\022~\n\006not_in\030\007 \003(\022Bg\302Hd\n" +
      "b\n\rsint64.not_in\032Qthis in rules.not_in ?" +
      " \'value must not be in list %s\'.format([" +
      "rules.not_in]) : \'\'R\005notInB\013\n\tless_thanB" +
      "\016\n\014greater_thanB\010\n\006_const\"\202\025\n\014Fixed32Rul" +
      "es\022w\n\005const\030\001 \001(\007B\\\302HY\nW\n\rfixed32.const\032" +
      "Fthis != rules.const ? \'value must equal" +
      " %s\'.format([rules.const]) : \'\'H\002R\005const" +
      "\210\001\001\022\220\001\n\002lt\030\002 \001(\007B~\302H{\ny\n\nfixed32.lt\032k!ha" +
      "s(rules.gte) && !has(rules.gt) && this >" +
      "= rules.lt? \'value must be less than %s\'" +
      ".format([rules.lt]) : \'\'H\000R\002lt\022\243\001\n\003lte\030\003" +
      " \001(\007B\216\001\302H\212\001\n\207\001\n\013fixed32.lte\032x!has(rules." +
      "gte) && !has(rules.gt) && this > rules.l" +
      "te? \'value must be less than or equal to" +
      " %s\'.format([rules.lte]) : \'\'H\000R\003lte\022\245\007\n" +
      "\002gt\030\004 \001(\007B\222\007\302H\216\007\n|\n\nfixed32.gt\032n!has(rul" +
      "es.lt) && !has(rules.lte) && this <= rul" +
      "es.gt? \'value must be greater than %s\'.f" +
      "ormat([rules.gt]) : \'\'\n\265\001\n\rfixed32.gt_lt" +
      "\032\243\001has(rules.lt) && rules.lt >= rules.gt" +
      " && (this >= rules.lt || this <= rules.g" +
      "t)? \'value must be greater than %s and l" +
      "ess than %s\'.format([rules.gt, rules.lt]" +
      ") : \'\'\n\275\001\n\027fixed32.gt_lt_exclusive\032\241\001has" +
      "(rules.lt) && rules.lt < rules.gt && (ru" +
      "les.lt <= this && this <= rules.gt)? \'va" +
      "lue must be greater than %s or less than" +
      " %s\'.format([rules.gt, rules.lt]) : \'\'\n\305" +
      "\001\n\016fixed32.gt_lte\032\262\001has(rules.lte) && ru" +
      "les.lte >= rules.gt && (this > rules.lte" +
      " || this <= rules.gt)? \'value must be gr" +
      "eater than %s and less than or equal to " +
      "%s\'.format([rules.gt, rules.lte]) : \'\'\n\315" +
      "\001\n\030fixed32.gt_lte_exclusive\032\260\001has(rules." +
      "lte) && rules.lte < rules.gt && (rules.l" +
      "te < this && this <= rules.gt)? \'value m" +
      "ust be greater than %s or less than or e" +
      "qual to %s\'.format([rules.gt, rules.lte]" +
      ") : \'\'H\001R\002gt\022\362\007\n\003gte\030\005 \001(\007B\335\007\302H\331\007\n\212\001\n\013fi" +
      "xed32.gte\032{!has(rules.lt) && !has(rules." +
      "lte) && this < rules.gte? \'value must be" +
      " greater than or equal to %s\'.format([ru" +
      "les.gte]) : \'\'\n\304\001\n\016fixed32.gte_lt\032\261\001has(" +
      "rules.lt) && rules.lt >= rules.gte && (t" +
      "his >= rules.lt || this < rules.gte)? \'v" +
      "alue must be greater than or equal to %s" +
      " and less than %s\'.format([rules.gte, ru" +
      "les.lt]) : \'\'\n\314\001\n\030fixed32.gte_lt_exclusi" +
      "ve\032\257\001has(rules.lt) && rules.lt < rules.g" +
      "te && (rules.lt <= this && this < rules." +
      "gte)? \'value must be greater than or equ" +
      "al to %s or less than %s\'.format([rules." +
      "gte, rules.lt]) : \'\'\n\324\001\n\017fixed32.gte_lte" +
      "\032\300\001has(rules.lte) && rules.lte >= rules." +
      "gte && (this > rules.lte || this < rules" +
      ".gte)? \'value must be greater than or eq" +
      "ual to %s and less than or equal to %s\'." +
      "format([rules.gte, rules.lte]) : \'\'\n\334\001\n\031" +
      "fixed32.gte_lte_exclusive\032\276\001has(rules.lt" +
      "e) && rules.lte < rules.gte && (rules.lt" +
      "e < this && this < rules.gte)? \'value mu" +
      "st be greater than or equal to %s or les" +
      "s than or equal to %s\'.format([rules.gte" +
      ", rules.lte]) : \'\'H\001R\003gte\022{\n\002in\030\006 \003(\007Bk\302" +
      "Hh\nf\n\nfixed32.in\032X!(this in dyn(rules)[\'" +
      "in\']) ? \'value must be in list %s\'.forma" +
      "t([dyn(rules)[\'in\']]) : \'\'R\002in\022\177\n\006not_in" +
      "\030\007 \003(\007Bh\302He\nc\n\016fixed32.not_in\032Qthis in r" +
      "ules.not_in ? \'value must not be in list" +
      " %s\'.format([rules.not_in]) : \'\'R\005notInB" +
      "\013\n\tless_thanB\016\n\014greater_thanB\010\n\006_const\"\202" +
      "\025\n\014Fixed64Rules\022w\n\005const\030\001 \001(\006B\\\302HY\nW\n\rf" +
      "ixed64.const\032Fthis != rules.const ? \'val" +
      "ue must equal %s\'.format([rules.const]) " +
      ": \'\'H\002R\005const\210\001\001\022\220\001\n\002lt\030\002 \001(\006B~\302H{\ny\n\nfi" +
      "xed64.lt\032k!has(rules.gte) && !has(rules." +
      "gt) && this >= rules.lt? \'value must be " +
      "less than %s\'.format([rules.lt]) : \'\'H\000R" +
      "\002lt\022\243\001\n\003lte\030\003 \001(\006B\216\001\302H\212\001\n\207\001\n\013fixed64.lte" +
      "\032x!has(rules.gte) && !has(rules.gt) && t" +
      "his > rules.lte? \'value must be less tha" +
      "n or equal to %s\'.format([rules.lte]) : " +
      "\'\'H\000R\003lte\022\245\007\n\002gt\030\004 \001(\006B\222\007\302H\216\007\n|\n\nfixed64" +
      ".gt\032n!has(rules.lt) && !has(rules.lte) &" +
      "& this <= rules.gt? \'value must be great" +
      "er than %s\'.format([rules.gt]) : \'\'\n\265\001\n\r" +
      "fixed64.gt_lt\032\243\001has(rules.lt) && rules.l" +
      "t >= rules.gt && (this >= rules.lt || th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s and less than %s\'.format([rules." +
      "gt, rules.lt]) : \'\'\n\275\001\n\027fixed64.gt_lt_ex" +
      "clusive\032\241\001has(rules.lt) && rules.lt < ru" +
      "les.gt && (rules.lt <= this && this <= r" +
      "ules.gt)? \'value must be greater than %s" +
      " or less than %s\'.format([rules.gt, rule" +
      "s.lt]) : \'\'\n\305\001\n\016fixed64.gt_lte\032\262\001has(rul" +
      "es.lte) && rules.lte >= rules.gt && (thi" +
      "s > rules.lte || this <= rules.gt)? \'val" +
      "ue must be greater than %s and less than" +
      " or equal to %s\'.format([rules.gt, rules" +
      ".lte]) : \'\'\n\315\001\n\030fixed64.gt_lte_exclusive" +
      "\032\260\001has(rules.lte) && rules.lte < rules.g" +
      "t && (rules.lte < this && this <= rules." +
      "gt)? \'value must be greater than %s or l" +
      "ess than or equal to %s\'.format([rules.g" +
      "t, rules.lte]) : \'\'H\001R\002gt\022\362\007\n\003gte\030\005 \001(\006B" +
      "\335\007\302H\331\007\n\212\001\n\013fixed64.gte\032{!has(rules.lt) &" +
      "& !has(rules.lte) && this < rules.gte? \'" +
      "value must be greater than or equal to %" +
      "s\'.format([rules.gte]) : \'\'\n\304\001\n\016fixed64." +
      "gte_lt\032\261\001has(rules.lt) && rules.lt >= ru" +
      "les.gte && (this >= rules.lt || this < r" +
      "ules.gte)? \'value must be greater than o" +
      "r equal to %s and less than %s\'.format([" +
      "rules.gte, rules.lt]) : \'\'\n\314\001\n\030fixed64.g" +
      "te_lt_exclusive\032\257\001has(rules.lt) && rules" +
      ".lt < rules.gte && (rules.lt <= this && " +
      "this < rules.gte)? \'value must be greate" +
      "r than or equal to %s or less than %s\'.f" +
      "ormat([rules.gte, rules.lt]) : \'\'\n\324\001\n\017fi" +
      "xed64.gte_lte\032\300\001has(rules.lte) && rules." +
      "lte >= rules.gte && (this > rules.lte ||" +
      " this < rules.gte)? \'value must be great" +
      "er than or equal to %s and less than or " +
      "equal to %s\'.format([rules.gte, rules.lt" +
      "e]) : \'\'\n\334\001\n\031fixed64.gte_lte_exclusive\032\276" +
      "\001has(rules.lte) && rules.lte < rules.gte" +
      " && (rules.lte < this && this < rules.gt" +
      "e)? \'value must be greater than or equal" +
      " to %s or less than or equal to %s\'.form" +
      "at([rules.gte, rules.lte]) : \'\'H\001R\003gte\022{" +
      "\n\002in\030\006 \003(\006Bk\302Hh\nf\n\nfixed64.in\032X!(this in" +
      " dyn(rules)[\'in\']) ? \'value must be in l" +
      "ist %s\'.format([dyn(rules)[\'in\']]) : \'\'R" +
      "\002in\022\177\n\006not_in\030\007 \003(\006Bh\302He\nc\n\016fixed64.not_" +
      "in\032Qthis in rules.not_in ? \'value must n" +
      "ot be in list %s\'.format([rules.not_in])" +
      " : \'\'R\005notInB\013\n\tless_thanB\016\n\014greater_tha" +
      "nB\010\n\006_const\"\223\025\n\rSFixed32Rules\022x\n\005const\030\001" +
      " \001(\017B]\302HZ\nX\n\016sfixed32.const\032Fthis != rul" +
      "es.const ? \'value must equal %s\'.format(" +
      "[rules.const]) : \'\'H\002R\005const\210\001\001\022\221\001\n\002lt\030\002" +
      " \001(\017B\177\302H|\nz\n\013sfixed32.lt\032k!has(rules.gte" +
      ") && !has(rules.gt) && this >= rules.lt?" +
      " \'value must be less than %s\'.format([ru" +
      "les.lt]) : \'\'H\000R\002lt\022\244\001\n\003lte\030\003 \001(\017B\217\001\302H\213\001" +
      "\n\210\001\n\014sfixed32.lte\032x!has(rules.gte) && !h" +
      "as(rules.gt) && this > rules.lte? \'value" +
      " must be less than or equal to %s\'.forma" +
      "t([rules.lte]) : \'\'H\000R\003lte\022\252\007\n\002gt\030\004 \001(\017B" +
      "\227\007\302H\223\007\n}\n\013sfixed32.gt\032n!has(rules.lt) &&" +
      " !has(rules.lte) && this <= rules.gt? \'v" +
      "alue must be greater than %s\'.format([ru" +
      "les.gt]) : \'\'\n\266\001\n\016sfixed32.gt_lt\032\243\001has(r" +
      "ules.lt) && rules.lt >= rules.gt && (thi" +
      "s >= rules.lt || this <= rules.gt)? \'val" +
      "ue must be greater than %s and less than" +
      " %s\'.format([rules.gt, rules.lt]) : \'\'\n\276" +
      "\001\n\030sfixed32.gt_lt_exclusive\032\241\001has(rules." +
      "lt) && rules.lt < rules.gt && (rules.lt " +
      "<= this && this <= rules.gt)? \'value mus" +
      "t be greater than %s or less than %s\'.fo" +
      "rmat([rules.gt, rules.lt]) : \'\'\n\306\001\n\017sfix" +
      "ed32.gt_lte\032\262\001has(rules.lte) && rules.lt" +
      "e >= rules.gt && (this > rules.lte || th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s and less than or equal to %s\'.fo" +
      "rmat([rules.gt, rules.lte]) : \'\'\n\316\001\n\031sfi" +
      "xed32.gt_lte_exclusive\032\260\001has(rules.lte) " +
      "&& rules.lte < rules.gt && (rules.lte < " +
      "this && this <= rules.gt)? \'value must b" +
      "e greater than %s or less than or equal " +
      "to %s\'.format([rules.gt, rules.lte]) : \'" +
      "\'H\001R\002gt\022\367\007\n\003gte\030\005 \001(\017B\342\007\302H\336\007\n\213\001\n\014sfixed3" +
      "2.gte\032{!has(rules.lt) && !has(rules.lte)" +
      " && this < rules.gte? \'value must be gre" +
      "ater than or equal to %s\'.format([rules." +
      "gte]) : \'\'\n\305\001\n\017sfixed32.gte_lt\032\261\001has(rul" +
      "es.lt) && rules.lt >= rules.gte && (this" +
      " >= rules.lt || this < rules.gte)? \'valu" +
      "e must be greater than or equal to %s an" +
      "d less than %s\'.format([rules.gte, rules" +
      ".lt]) : \'\'\n\315\001\n\031sfixed32.gte_lt_exclusive" +
      "\032\257\001has(rules.lt) && rules.lt < rules.gte" +
      " && (rules.lt <= this && this < rules.gt" +
      "e)? \'value must be greater than or equal" +
      " to %s or less than %s\'.format([rules.gt" +
      "e, rules.lt]) : \'\'\n\325\001\n\020sfixed32.gte_lte\032" +
      "\300\001has(rules.lte) && rules.lte >= rules.g" +
      "te && (this > rules.lte || this < rules." +
      "gte)? \'value must be greater than or equ" +
      "al to %s and less than or equal to %s\'.f" +
      "ormat([rules.gte, rules.lte]) : \'\'\n\335\001\n\032s" +
      "fixed32.gte_lte_exclusive\032\276\001has(rules.lt" +
      "e) && rules.lte < rules.gte && (rules.lt" +
      "e < this && this < rules.gte)? \'value mu" +
      "st be greater than or equal to %s or les" +
      "s than or equal to %s\'.format([rules.gte" +
      ", rules.lte]) : \'\'H\001R\003gte\022|\n\002in\030\006 \003(\017Bl\302" +
      "Hi\ng\n\013sfixed32.in\032X!(this in dyn(rules)[" +
      "\'in\']) ? \'value must be in list %s\'.form" +
      "at([dyn(rules)[\'in\']]) : \'\'R\002in\022\200\001\n\006not_" +
      "in\030\007 \003(\017Bi\302Hf\nd\n\017sfixed32.not_in\032Qthis i" +
      "n rules.not_in ? \'value must not be in l" +
      "ist %s\'.format([rules.not_in]) : \'\'R\005not" +
      "InB\013\n\tless_thanB\016\n\014greater_thanB\010\n\006_cons" +
      "t\"\223\025\n\rSFixed64Rules\022x\n\005const\030\001 \001(\020B]\302HZ\n" +
      "X\n\016sfixed64.const\032Fthis != rules.const ?" +
      " \'value must equal %s\'.format([rules.con" +
      "st]) : \'\'H\002R\005const\210\001\001\022\221\001\n\002lt\030\002 \001(\020B\177\302H|\n" +
      "z\n\013sfixed64.lt\032k!has(rules.gte) && !has(" +
      "rules.gt) && this >= rules.lt? \'value mu",
      "st be less than %s\'.format([rules.lt]) :" +
      " \'\'H\000R\002lt\022\244\001\n\003lte\030\003 \001(\020B\217\001\302H\213\001\n\210\001\n\014sfixe" +
      "d64.lte\032x!has(rules.gte) && !has(rules.g" +
      "t) && this > rules.lte? \'value must be l" +
      "ess than or equal to %s\'.format([rules.l" +
      "te]) : \'\'H\000R\003lte\022\252\007\n\002gt\030\004 \001(\020B\227\007\302H\223\007\n}\n\013" +
      "sfixed64.gt\032n!has(rules.lt) && !has(rule" +
      "s.lte) && this <= rules.gt? \'value must " +
      "be greater than %s\'.format([rules.gt]) :" +
      " \'\'\n\266\001\n\016sfixed64.gt_lt\032\243\001has(rules.lt) &" +
      "& rules.lt >= rules.gt && (this >= rules" +
      ".lt || this <= rules.gt)? \'value must be" +
      " greater than %s and less than %s\'.forma" +
      "t([rules.gt, rules.lt]) : \'\'\n\276\001\n\030sfixed6" +
      "4.gt_lt_exclusive\032\241\001has(rules.lt) && rul" +
      "es.lt < rules.gt && (rules.lt <= this &&" +
      " this <= rules.gt)? \'value must be great" +
      "er than %s or less than %s\'.format([rule" +
      "s.gt, rules.lt]) : \'\'\n\306\001\n\017sfixed64.gt_lt" +
      "e\032\262\001has(rules.lte) && rules.lte >= rules" +
      ".gt && (this > rules.lte || this <= rule" +
      "s.gt)? \'value must be greater than %s an" +
      "d less than or equal to %s\'.format([rule" +
      "s.gt, rules.lte]) : \'\'\n\316\001\n\031sfixed64.gt_l" +
      "te_exclusive\032\260\001has(rules.lte) && rules.l" +
      "te < rules.gt && (rules.lte < this && th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s or less than or equal to %s\'.for" +
      "mat([rules.gt, rules.lte]) : \'\'H\001R\002gt\022\367\007" +
      "\n\003gte\030\005 \001(\020B\342\007\302H\336\007\n\213\001\n\014sfixed64.gte\032{!ha" +
      "s(rules.lt) && !has(rules.lte) && this <" +
      " rules.gte? \'value must be greater than " +
      "or equal to %s\'.format([rules.gte]) : \'\'" +
      "\n\305\001\n\017sfixed64.gte_lt\032\261\001has(rules.lt) && " +
      "rules.lt >= rules.gte && (this >= rules." +
      "lt || this < rules.gte)? \'value must be " +
      "greater than or equal to %s and less tha" +
      "n %s\'.format([rules.gte, rules.lt]) : \'\'" +
      "\n\315\001\n\031sfixed64.gte_lt_exclusive\032\257\001has(rul" +
      "es.lt) && rules.lt < rules.gte && (rules" +
      ".lt <= this && this < rules.gte)? \'value" +
      " must be greater than or equal to %s or " +
      "less than %s\'.format([rules.gte, rules.l" +
      "t]) : \'\'\n\325\001\n\020sfixed64.gte_lte\032\300\001has(rule" +
      "s.lte) && rules.lte >= rules.gte && (thi" +
      "s > rules.lte || this < rules.gte)? \'val" +
      "ue must be greater than or equal to %s a" +
      "nd less than or equal to %s\'.format([rul" +
      "es.gte, rules.lte]) : \'\'\n\335\001\n\032sfixed64.gt" +
      "e_lte_exclusive\032\276\001has(rules.lte) && rule" +
      "s.lte < rules.gte && (rules.lte < this &" +
      "& this < rules.gte)? \'value must be grea" +
      "ter than or equal to %s or less than or " +
      "equal to %s\'.format([rules.gte, rules.lt" +
      "e]) : \'\'H\001R\003gte\022|\n\002in\030\006 \003(\020Bl\302Hi\ng\n\013sfix" +
      "ed64.in\032X!(this in dyn(rules)[\'in\']) ? \'" +
      "value must be in list %s\'.format([dyn(ru" +
      "les)[\'in\']]) : \'\'R\002in\022\200\001\n\006not_in\030\007 \003(\020Bi" +
      "\302Hf\nd\n\017sfixed64.not_in\032Qthis in rules.no" +
      "t_in ? \'value must not be in list %s\'.fo" +
      "rmat([rules.not_in]) : \'\'R\005notInB\013\n\tless" +
      "_thanB\016\n\014greater_thanB\010\n\006_const\"\213\001\n\tBool" +
      "Rules\022t\n\005const\030\001 \001(\010BY\302HV\nT\n\nbool.const\032" +
      "Fthis != rules.const ? \'value must equal" +
      " %s\'.format([rules.const]) : \'\'H\000R\005const" +
      "\210\001\001B\010\n\006_const\"\350$\n\013StringRules\022x\n\005const\030\001" +
      " \001(\tB]\302HZ\nX\n\014string.const\032Hthis != rules" +
      ".const ? \'value must equal `%s`\'.format(" +
      "[rules.const]) : \'\'H\001R\005const\210\001\001\022\210\001\n\003len\030" +
      "\023 \001(\004Bq\302Hn\nl\n\nstring.len\032^uint(this.size" +
      "()) != rules.len ? \'value length must be" +
      " %s characters\'.format([rules.len]) : \'\'" +
      "H\002R\003len\210\001\001\022\246\001\n\007min_len\030\002 \001(\004B\207\001\302H\203\001\n\200\001\n\016" +
      "string.min_len\032nuint(this.size()) < rule" +
      "s.min_len ? \'value length must be at lea" +
      "st %s characters\'.format([rules.min_len]" +
      ") : \'\'H\003R\006minLen\210\001\001\022\244\001\n\007max_len\030\003 \001(\004B\205\001" +
      "\302H\201\001\n\177\n\016string.max_len\032muint(this.size()" +
      ") > rules.max_len ? \'value length must b" +
      "e at most %s characters\'.format([rules.m" +
      "ax_len]) : \'\'H\004R\006maxLen\210\001\001\022\252\001\n\tlen_bytes" +
      "\030\024 \001(\004B\207\001\302H\203\001\n\200\001\n\020string.len_bytes\032luint" +
      "(bytes(this).size()) != rules.len_bytes " +
      "? \'value length must be %s bytes\'.format" +
      "([rules.len_bytes]) : \'\'H\005R\010lenBytes\210\001\001\022" +
      "\262\001\n\tmin_bytes\030\004 \001(\004B\217\001\302H\213\001\n\210\001\n\020string.mi" +
      "n_bytes\032tuint(bytes(this).size()) < rule" +
      "s.min_bytes ? \'value length must be at l" +
      "east %s bytes\'.format([rules.min_bytes])" +
      " : \'\'H\006R\010minBytes\210\001\001\022\261\001\n\tmax_bytes\030\005 \001(\004" +
      "B\216\001\302H\212\001\n\207\001\n\020string.max_bytes\032suint(bytes" +
      "(this).size()) > rules.max_bytes ? \'valu" +
      "e length must be at most %s bytes\'.forma" +
      "t([rules.max_bytes]) : \'\'H\007R\010maxBytes\210\001\001" +
      "\022\233\001\n\007pattern\030\006 \001(\tB|\302Hy\nw\n\016string.patter" +
      "n\032e!this.matches(rules.pattern) ? \'value" +
      " does not match regex pattern `%s`\'.form" +
      "at([rules.pattern]) : \'\'H\010R\007pattern\210\001\001\022\221" +
      "\001\n\006prefix\030\007 \001(\tBt\302Hq\no\n\rstring.prefix\032^!" +
      "this.startsWith(rules.prefix) ? \'value d" +
      "oes not have prefix `%s`\'.format([rules." +
      "prefix]) : \'\'H\tR\006prefix\210\001\001\022\217\001\n\006suffix\030\010 " +
      "\001(\tBr\302Ho\nm\n\rstring.suffix\032\\!this.endsWit" +
      "h(rules.suffix) ? \'value does not have s" +
      "uffix `%s`\'.format([rules.suffix]) : \'\'H" +
      "\nR\006suffix\210\001\001\022\237\001\n\010contains\030\t \001(\tB~\302H{\ny\n\017" +
      "string.contains\032f!this.contains(rules.co" +
      "ntains) ? \'value does not contain substr" +
      "ing `%s`\'.format([rules.contains]) : \'\'H" +
      "\013R\010contains\210\001\001\022\252\001\n\014not_contains\030\027 \001(\tB\201\001" +
      "\302H~\n|\n\023string.not_contains\032ethis.contain" +
      "s(rules.not_contains) ? \'value contains " +
      "substring `%s`\'.format([rules.not_contai" +
      "ns]) : \'\'H\014R\013notContains\210\001\001\022z\n\002in\030\n \003(\tB" +
      "j\302Hg\ne\n\tstring.in\032X!(this in dyn(rules)[" +
      "\'in\']) ? \'value must be in list %s\'.form" +
      "at([dyn(rules)[\'in\']]) : \'\'R\002in\022~\n\006not_i" +
      "n\030\013 \003(\tBg\302Hd\nb\n\rstring.not_in\032Qthis in r" +
      "ules.not_in ? \'value must not be in list" +
      " %s\'.format([rules.not_in]) : \'\'R\005notIn\022" +
      "`\n\005email\030\014 \001(\010BH\302HE\nC\n\014string.email\022#val" +
      "ue must be a valid email address\032\016this.i" +
      "sEmail()H\000R\005email\022g\n\010hostname\030\r \001(\010BI\302HF" +
      "\nD\n\017string.hostname\022\036value must be a val" +
      "id hostname\032\021this.isHostname()H\000R\010hostna" +
      "me\022Q\n\002ip\030\016 \001(\010B?\302H<\n:\n\tstring.ip\022 value " +
      "must be a valid IP address\032\013this.isIp()H" +
      "\000R\002ip\022Z\n\004ipv4\030\017 \001(\010BD\302HA\n?\n\013string.ipv4\022" +
      "\"value must be a valid IPv4 address\032\014thi" +
      "s.isIp(4)H\000R\004ipv4\022Z\n\004ipv6\030\020 \001(\010BD\302HA\n?\n\013" +
      "string.ipv6\022\"value must be a valid IPv6 " +
      "address\032\014this.isIp(6)H\000R\004ipv6\022N\n\003uri\030\021 \001" +
      "(\010B:\302H7\n5\n\nstring.uri\022\031value must be a v" +
      "alid URI\032\014this.isUri()H\000R\003uri\022\\\n\007uri_ref" +
      "\030\022 \001(\010BA\302H>\n<\n\016string.uri_ref\022\031value mus" +
      "t be a valid URI\032\017this.isUriRef()H\000R\006uri" +
      "Ref\022\202\001\n\007address\030\025 \001(\010Bf\302Hc\na\n\016string.add" +
      "ress\022-value must be a valid hostname, or" +
      " ip address\032 this.isHostname() || this.i" +
      "sIp()H\000R\007address\022\260\001\n\004uuid\030\026 \001(\010B\231\001\302H\225\001\n\222" +
      "\001\n\013string.uuid\032\202\001!this.matches(\'^[0-9a-f" +
      "A-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0" +
      "-9a-fA-F]{4}-[0-9a-fA-F]{12}$\') ? \'value" +
      " must be a valid UUID\' : \'\'H\000R\004uuid\022\201\001\n\021" +
      "ip_with_prefixlen\030\032 \001(\010BS\302HP\nN\n\030string.i" +
      "p_with_prefixlen\022\037value must be a valid " +
      "IP prefix\032\021this.isIpPrefix()H\000R\017ipWithPr" +
      "efixlen\022\236\001\n\023ipv4_with_prefixlen\030\033 \001(\010Bl\302" +
      "Hi\ng\n\032string.ipv4_with_prefixlen\0225value " +
      "must be a valid IPv4 address with prefix" +
      " length\032\022this.isIpPrefix(4)H\000R\021ipv4WithP" +
      "refixlen\022\236\001\n\023ipv6_with_prefixlen\030\034 \001(\010Bl" +
      "\302Hi\ng\n\032string.ipv6_with_prefixlen\0225value" +
      " must be a valid IPv6 address with prefi" +
      "x length\032\022this.isIpPrefix(6)H\000R\021ipv6With" +
      "Prefixlen\022n\n\tip_prefix\030\035 \001(\010BO\302HL\nJ\n\020str" +
      "ing.ip_prefix\022\037value must be a valid IP " +
      "prefix\032\025this.isIpPrefix(true)H\000R\010ipPrefi" +
      "x\022y\n\013ipv4_prefix\030\036 \001(\010BV\302HS\nQ\n\022string.ip" +
      "v4_prefix\022!value must be a valid IPv4 pr" +
      "efix\032\030this.isIpPrefix(4, true)H\000R\nipv4Pr" +
      "efix\022y\n\013ipv6_prefix\030\037 \001(\010BV\302HS\nQ\n\022string" +
      ".ipv6_prefix\022!value must be a valid IPv6" +
      " prefix\032\030this.isIpPrefix(6, true)H\000R\nipv" +
      "6Prefix\022\254\004\n\020well_known_regex\030\030 \001(\0162\030.buf" +
      ".validate.KnownRegexB\345\003\302H\341\003\n\353\001\n#string.w" +
      "ell_known_regex.header_name\032\303\001rules.well" +
      "_known_regex == 1 && !this.matches(!has(" +
      "rules.strict) || rules.strict ?\'^:?[0-9a" +
      "-zA-Z!#$%&\\\'*+-.^_|~\\x60]+$\' :\'^[^\\u0000" +
      "\\u000A\\u000D]+$\') ? \'value must be a val" +
      "id HTTP header name\' : \'\'\n\360\001\n$string.wel" +
      "l_known_regex.header_value\032\307\001rules.well_" +
      "known_regex == 2 && !this.matches(!has(r" +
      "ules.strict) || rules.strict ?\'^[^\\u0000" +
      "-\\u0008\\u000A-\\u001F\\u007F]*$\' :\'^[^\\u00" +
      "00\\u000A\\u000D]*$\') ? \'value must be a v" +
      "alid HTTP header value\' : \'\'H\000R\016wellKnow" +
      "nRegex\022\033\n\006strict\030\031 \001(\010H\rR\006strict\210\001\001B\014\n\nw" +
      "ell_knownB\010\n\006_constB\006\n\004_lenB\n\n\010_min_lenB" +
      "\n\n\010_max_lenB\014\n\n_len_bytesB\014\n\n_min_bytesB" +
      "\014\n\n_max_bytesB\n\n\010_patternB\t\n\007_prefixB\t\n\007" +
      "_suffixB\013\n\t_containsB\017\n\r_not_containsB\t\n" +
      "\007_strict\"\332\016\n\nBytesRules\022r\n\005const\030\001 \001(\014BW" +
      "\302HT\nR\n\013bytes.const\032Cthis != rules.const " +
      "? \'value must be %x\'.format([rules.const" +
      "]) : \'\'H\001R\005const\210\001\001\022\202\001\n\003len\030\r \001(\004Bk\302Hh\nf" +
      "\n\tbytes.len\032Yuint(this.size()) != rules." +
      "len ? \'value length must be %s bytes\'.fo" +
      "rmat([rules.len]) : \'\'H\002R\003len\210\001\001\022\235\001\n\007min" +
      "_len\030\002 \001(\004B\177\302H|\nz\n\rbytes.min_len\032iuint(t" +
      "his.size()) < rules.min_len ? \'value len" +
      "gth must be at least %s bytes\'.format([r" +
      "ules.min_len]) : \'\'H\003R\006minLen\210\001\001\022\225\001\n\007max" +
      "_len\030\003 \001(\004Bw\302Ht\nr\n\rbytes.max_len\032auint(t" +
      "his.size()) > rules.max_len ? \'value mus" +
      "t be at most %s bytes\'.format([rules.max" +
      "_len]) : \'\'H\004R\006maxLen\210\001\001\022\236\001\n\007pattern\030\004 \001" +
      "(\tB\177\302H|\nz\n\rbytes.pattern\032i!string(this)." +
      "matches(rules.pattern) ? \'value must mat" +
      "ch regex pattern `%s`\'.format([rules.pat" +
      "tern]) : \'\'H\005R\007pattern\210\001\001\022\216\001\n\006prefix\030\005 \001" +
      "(\014Bq\302Hn\nl\n\014bytes.prefix\032\\!this.startsWit" +
      "h(rules.prefix) ? \'value does not have p" +
      "refix %x\'.format([rules.prefix]) : \'\'H\006R" +
      "\006prefix\210\001\001\022\214\001\n\006suffix\030\006 \001(\014Bo\302Hl\nj\n\014byte" +
      "s.suffix\032Z!this.endsWith(rules.suffix) ?" +
      " \'value does not have suffix %x\'.format(" +
      "[rules.suffix]) : \'\'H\007R\006suffix\210\001\001\022\222\001\n\010co" +
      "ntains\030\007 \001(\014Bq\302Hn\nl\n\016bytes.contains\032Z!th" +
      "is.contains(rules.contains) ? \'value doe" +
      "s not contain %x\'.format([rules.contains" +
      "]) : \'\'H\010R\010contains\210\001\001\022\233\001\n\002in\030\010 \003(\014B\212\001\302H" +
      "\206\001\n\203\001\n\010bytes.in\032wdyn(rules)[\'in\'].size()" +
      " > 0 && !(this in dyn(rules)[\'in\']) ? \'v" +
      "alue must be in list %s\'.format([dyn(rul" +
      "es)[\'in\']]) : \'\'R\002in\022}\n\006not_in\030\t \003(\014Bf\302H" +
      "c\na\n\014bytes.not_in\032Qthis in rules.not_in " +
      "? \'value must not be in list %s\'.format(" +
      "[rules.not_in]) : \'\'R\005notIn\022r\n\002ip\030\n \001(\010B" +
      "`\302H]\n[\n\010bytes.ip\032Othis.size() != 4 && th" +
      "is.size() != 16 ? \'value must be a valid" +
      " IP address\' : \'\'H\000R\002ip\022e\n\004ipv4\030\013 \001(\010BO\302" +
      "HL\nJ\n\nbytes.ipv4\032<this.size() != 4 ? \'va" +
      "lue must be a valid IPv4 address\' : \'\'H\000" +
      "R\004ipv4\022f\n\004ipv6\030\014 \001(\010BP\302HM\nK\n\nbytes.ipv6\032" +
      "=this.size() != 16 ? \'value must be a va" +
      "lid IPv6 address\' : \'\'H\000R\004ipv6B\014\n\nwell_k" +
      "nownB\010\n\006_constB\006\n\004_lenB\n\n\010_min_lenB\n\n\010_m" +
      "ax_lenB\n\n\010_patternB\t\n\007_prefixB\t\n\007_suffix" +
      "B\013\n\t_contains\"\274\003\n\tEnumRules\022t\n\005const\030\001 \001" +
      "(\005BY\302HV\nT\n\nenum.const\032Fthis != rules.con" +
      "st ? \'value must equal %s\'.format([rules" +
      ".const]) : \'\'H\000R\005const\210\001\001\022&\n\014defined_onl" +
      "y\030\002 \001(\010H\001R\013definedOnly\210\001\001\022x\n\002in\030\003 \003(\005Bh\302" +
      "He\nc\n\007enum.in\032X!(this in dyn(rules)[\'in\'" +
      "]) ? \'value must be in list %s\'.format([" +
      "dyn(rules)[\'in\']]) : \'\'R\002in\022|\n\006not_in\030\004 " +
      "\003(\005Be\302Hb\n`\n\013enum.not_in\032Qthis in rules.n" +
      "ot_in ? \'value must not be in list %s\'.f" +
      "ormat([rules.not_in]) : \'\'R\005notInB\010\n\006_co" +
      "nstB\017\n\r_defined_only\"\315\004\n\rRepeatedRules\022\255" +
      "\001\n\tmin_items\030\001 \001(\004B\212\001\302H\206\001\n\203\001\n\022repeated.m" +
      "in_items\032muint(this.size()) < rules.min_" +
      "items ? \'value must contain at least %d " +
      "item(s)\'.format([rules.min_items]) : \'\'H" +
      "\000R\010minItems\210\001\001\022\261\001\n\tmax_items\030\002 \001(\004B\216\001\302H\212" +
      "\001\n\207\001\n\022repeated.max_items\032quint(this.size" +
      "()) > rules.max_items ? \'value must cont" +
      "ain no more than %s item(s)\'.format([rul" +
      "es.max_items]) : \'\'H\001R\010maxItems\210\001\001\022l\n\006un" +
      "ique\030\003 \001(\010BO\302HL\nJ\n\017repeated.unique\022(repe" +
      "ated value must contain unique items\032\rth" +
      "is.unique()H\002R\006unique\210\001\001\0229\n\005items\030\004 \001(\0132" +
      "\036.buf.validate.FieldConstraintsH\003R\005items" +
      "\210\001\001B\014\n\n_min_itemsB\014\n\n_max_itemsB\t\n\007_uniq" +
      "ueB\010\n\006_items\"\361\003\n\010MapRules\022\236\001\n\tmin_pairs\030" +
      "\001 \001(\004B|\302Hy\nw\n\rmap.min_pairs\032fuint(this.s" +
      "ize()) < rules.min_pairs ? \'map must be " +
      "at least %d entries\'.format([rules.min_p" +
      "airs]) : \'\'H\000R\010minPairs\210\001\001\022\235\001\n\tmax_pairs" +
      "\030\002 \001(\004B{\302Hx\nv\n\rmap.max_pairs\032euint(this." +
      "size()) > rules.max_pairs ? \'map must be" +
      " at most %d entries\'.format([rules.max_p" +
      "airs]) : \'\'H\001R\010maxPairs\210\001\001\0227\n\004keys\030\004 \001(\013" +
      "2\036.buf.validate.FieldConstraintsH\002R\004keys" +
      "\210\001\001\022;\n\006values\030\005 \001(\0132\036.buf.validate.Field" +
      "ConstraintsH\003R\006values\210\001\001B\014\n\n_min_pairsB\014" +
      "\n\n_max_pairsB\007\n\005_keysB\t\n\007_values\"1\n\010AnyR" +
      "ules\022\016\n\002in\030\002 \003(\tR\002in\022\025\n\006not_in\030\003 \003(\tR\005no" +
      "tIn\"\322\026\n\rDurationRules\022\223\001\n\005const\030\002 \001(\0132\031." +
      "google.protobuf.DurationB]\302HZ\nX\n\016duratio" +
      "n.const\032Fthis != rules.const ? \'value mu" +
      "st equal %s\'.format([rules.const]) : \'\'H" +
      "\002R\005const\210\001\001\022\254\001\n\002lt\030\003 \001(\0132\031.google.protob" +
      "uf.DurationB\177\302H|\nz\n\013duration.lt\032k!has(ru" +
      "les.gte) && !has(rules.gt) && this >= ru" +
      "les.lt? \'value must be less than %s\'.for" +
      "mat([rules.lt]) : \'\'H\000R\002lt\022\277\001\n\003lte\030\004 \001(\013" +
      "2\031.google.protobuf.DurationB\217\001\302H\213\001\n\210\001\n\014d" +
      "uration.lte\032x!has(rules.gte) && !has(rul" +
      "es.gt) && this > rules.lte? \'value must " +
      "be less than or equal to %s\'.format([rul" +
      "es.lte]) : \'\'H\000R\003lte\022\305\007\n\002gt\030\005 \001(\0132\031.goog" +
      "le.protobuf.DurationB\227\007\302H\223\007\n}\n\013duration." +
      "gt\032n!has(rules.lt) && !has(rules.lte) &&" +
      " this <= rules.gt? \'value must be greate" +
      "r than %s\'.format([rules.gt]) : \'\'\n\266\001\n\016d" +
      "uration.gt_lt\032\243\001has(rules.lt) && rules.l" +
      "t >= rules.gt && (this >= rules.lt || th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s and less than %s\'.format([rules." +
      "gt, rules.lt]) : \'\'\n\276\001\n\030duration.gt_lt_e" +
      "xclusive\032\241\001has(rules.lt) && rules.lt < r" +
      "ules.gt && (rules.lt <= this && this <= " +
      "rules.gt)? \'value must be greater than %" +
      "s or less than %s\'.format([rules.gt, rul" +
      "es.lt]) : \'\'\n\306\001\n\017duration.gt_lte\032\262\001has(r" +
      "ules.lte) && rules.lte >= rules.gt && (t" +
      "his > rules.lte || this <= rules.gt)? \'v" +
      "alue must be greater than %s and less th" +
      "an or equal to %s\'.format([rules.gt, rul" +
      "es.lte]) : \'\'\n\316\001\n\031duration.gt_lte_exclus" +
      "ive\032\260\001has(rules.lte) && rules.lte < rule" +
      "s.gt && (rules.lte < this && this <= rul" +
      "es.gt)? \'value must be greater than %s o" +
      "r less than or equal to %s\'.format([rule" +
      "s.gt, rules.lte]) : \'\'H\001R\002gt\022\222\010\n\003gte\030\006 \001" +
      "(\0132\031.google.protobuf.DurationB\342\007\302H\336\007\n\213\001\n" +
      "\014duration.gte\032{!has(rules.lt) && !has(ru" +
      "les.lte) && this < rules.gte? \'value mus" +
      "t be greater than or equal to %s\'.format" +
      "([rules.gte]) : \'\'\n\305\001\n\017duration.gte_lt\032\261" +
      "\001has(rules.lt) && rules.lt >= rules.gte " +
      "&& (this >= rules.lt || this < rules.gte" +
      ")? \'value must be greater than or equal " +
      "to %s and less than %s\'.format([rules.gt" +
      "e, rules.lt]) : \'\'\n\315\001\n\031duration.gte_lt_e" +
      "xclusive\032\257\001has(rules.lt) && rules.lt < r" +
      "ules.gte && (rules.lt <= this && this < " +
      "rules.gte)? \'value must be greater than " +
      "or equal to %s or less than %s\'.format([" +
      "rules.gte, rules.lt]) : \'\'\n\325\001\n\020duration." +
      "gte_lte\032\300\001has(rules.lte) && rules.lte >=" +
      " rules.gte && (this > rules.lte || this " +
      "< rules.gte)? \'value must be greater tha" +
      "n or equal to %s and less than or equal " +
      "to %s\'.format([rules.gte, rules.lte]) : " +
      "\'\'\n\335\001\n\032duration.gte_lte_exclusive\032\276\001has(" +
      "rules.lte) && rules.lte < rules.gte && (" +
      "rules.lte < this && this < rules.gte)? \'" +
      "value must be greater than or equal to %" +
      "s or less than or equal to %s\'.format([r" +
      "ules.gte, rules.lte]) : \'\'H\001R\003gte\022\227\001\n\002in" +
      "\030\007 \003(\0132\031.google.protobuf.DurationBl\302Hi\ng" +
      "\n\013duration.in\032X!(this in dyn(rules)[\'in\'" +
      "]) ? \'value must be in list %s\'.format([" +
      "dyn(rules)[\'in\']]) : \'\'R\002in\022\233\001\n\006not_in\030\010" +
      " \003(\0132\031.google.protobuf.DurationBi\302Hf\nd\n\017" +
      "duration.not_in\032Qthis in rules.not_in ? " +
      "\'value must not be in list %s\'.format([r" +
      "ules.not_in]) : \'\'R\005notInB\013\n\tless_thanB\016" +
      "\n\014greater_thanB\010\n\006_const\"\312\027\n\016TimestampRu" +
      "les\022\225\001\n\005const\030\002 \001(\0132\032.google.protobuf.Ti" +
      "mestampB^\302H[\nY\n\017timestamp.const\032Fthis !=" +
      " rules.const ? \'value must equal %s\'.for" +
      "mat([rules.const]) : \'\'H\002R\005const\210\001\001\022\257\001\n\002" +
      "lt\030\003 \001(\0132\032.google.protobuf.TimestampB\200\001\302" +
      "H}\n{\n\014timestamp.lt\032k!has(rules.gte) && !" +
      "has(rules.gt) && this >= rules.lt? \'valu" +
      "e must be less than %s\'.format([rules.lt" +
      "]) : \'\'H\000R\002lt\022\301\001\n\003lte\030\004 \001(\0132\032.google.pro" +
      "tobuf.TimestampB\220\001\302H\214\001\n\211\001\n\rtimestamp.lte" +
      "\032x!has(rules.gte) && !has(rules.gt) && t" +
      "his > rules.lte? \'value must be less tha" +
      "n or equal to %s\'.format([rules.lte]) : " +
      "\'\'H\000R\003lte\022a\n\006lt_now\030\007 \001(\010BH\302HE\nC\n\020timest" +
      "amp.lt_now\032/this > now ? \'value must be " +
      "less than now\' : \'\'H\000R\005ltNow\022\313\007\n\002gt\030\005 \001(" +
      "\0132\032.google.protobuf.TimestampB\234\007\302H\230\007\n~\n\014" +
      "timestamp.gt\032n!has(rules.lt) && !has(rul" +
      "es.lte) && this <= rules.gt? \'value must" +
      " be greater than %s\'.format([rules.gt]) " +
      ": \'\'\n\267\001\n\017timestamp.gt_lt\032\243\001has(rules.lt)" +
      " && rules.lt >= rules.gt && (this >= rul" +
      "es.lt || this <= rules.gt)? \'value must " +
      "be greater than %s and less than %s\'.for" +
      "mat([rules.gt, rules.lt]) : \'\'\n\277\001\n\031times" +
      "tamp.gt_lt_exclusive\032\241\001has(rules.lt) && " +
      "rules.lt < rules.gt && (rules.lt <= this" +
      " && this <= rules.gt)? \'value must be gr" +
      "eater than %s or less than %s\'.format([r" +
      "ules.gt, rules.lt]) : \'\'\n\307\001\n\020timestamp.g" +
      "t_lte\032\262\001has(rules.lte) && rules.lte >= r" +
      "ules.gt && (this > rules.lte || this <= " +
      "rules.gt)? \'value must be greater than %" +
      "s and less than or equal to %s\'.format([" +
      "rules.gt, rules.lte]) : \'\'\n\317\001\n\032timestamp" +
      ".gt_lte_exclusive\032\260\001has(rules.lte) && ru" +
      "les.lte < rules.gt && (rules.lte < this " +
      "&& this <= rules.gt)? \'value must be gre" +
      "ater than %s or less than or equal to %s" +
      "\'.format([rules.gt, rules.lte]) : \'\'H\001R\002" +
      "gt\022\230\010\n\003gte\030\006 \001(\0132\032.google.protobuf.Times" +
      "tampB\347\007\302H\343\007\n\214\001\n\rtimestamp.gte\032{!has(rule" +
      "s.lt) && !has(rules.lte) && this < rules" +
      ".gte? \'value must be greater than or equ" +
      "al to %s\'.format([rules.gte]) : \'\'\n\306\001\n\020t" +
      "imestamp.gte_lt\032\261\001has(rules.lt) && rules" +
      ".lt >= rules.gte && (this >= rules.lt ||" +
      " this < rules.gte)? \'value must be great" +
      "er than or equal to %s and less than %s\'" +
      ".format([rules.gte, rules.lt]) : \'\'\n\316\001\n\032" +
      "timestamp.gte_lt_exclusive\032\257\001has(rules.l" +
      "t) && rules.lt < rules.gte && (rules.lt " +
      "<= this && this < rules.gte)? \'value mus" +
      "t be greater than or equal to %s or less" +
      " than %s\'.format([rules.gte, rules.lt]) " +
      ": \'\'\n\326\001\n\021timestamp.gte_lte\032\300\001has(rules.l" +
      "te) && rules.lte >= rules.gte && (this >",
      " rules.lte || this < rules.gte)? \'value " +
      "must be greater than or equal to %s and " +
      "less than or equal to %s\'.format([rules." +
      "gte, rules.lte]) : \'\'\n\336\001\n\033timestamp.gte_" +
      "lte_exclusive\032\276\001has(rules.lte) && rules." +
      "lte < rules.gte && (rules.lte < this && " +
      "this < rules.gte)? \'value must be greate" +
      "r than or equal to %s or less than or eq" +
      "ual to %s\'.format([rules.gte, rules.lte]" +
      ") : \'\'H\001R\003gte\022d\n\006gt_now\030\010 \001(\010BK\302HH\nF\n\020ti" +
      "mestamp.gt_now\0322this < now ? \'value must" +
      " be greater than now\' : \'\'H\001R\005gtNow\022\305\001\n\006" +
      "within\030\t \001(\0132\031.google.protobuf.DurationB" +
      "\214\001\302H\210\001\n\205\001\n\020timestamp.within\032qthis < now-" +
      "rules.within || this > now+rules.within " +
      "? \'value must be within %s of now\'.forma" +
      "t([rules.within]) : \'\'H\003R\006within\210\001\001B\013\n\tl" +
      "ess_thanB\016\n\014greater_thanB\010\n\006_constB\t\n\007_w" +
      "ithin*n\n\nKnownRegex\022\033\n\027KNOWN_REGEX_UNSPE" +
      "CIFIED\020\000\022 \n\034KNOWN_REGEX_HTTP_HEADER_NAME" +
      "\020\001\022!\n\035KNOWN_REGEX_HTTP_HEADER_VALUE\020\002:_\n" +
      "\007message\022\037.google.protobuf.MessageOption" +
      "s\030\207\t \001(\0132 .buf.validate.MessageConstrain" +
      "tsR\007message\210\001\001:W\n\005oneof\022\035.google.protobu" +
      "f.OneofOptions\030\207\t \001(\0132\036.buf.validate.One" +
      "ofConstraintsR\005oneof\210\001\001:W\n\005field\022\035.googl" +
      "e.protobuf.FieldOptions\030\207\t \001(\0132\036.buf.val" +
      "idate.FieldConstraintsR\005field\210\001\001Bn\n\022buil" +
      "d.buf.validateB\rValidateProtoP\001ZGbuf.bui" +
      "ld/gen/go/bufbuild/protovalidate/protoco" +
      "lbuffers/go/buf/validateb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          build.buf.validate.ExpressionProto.getDescriptor(),
          build.buf.validate.priv.PrivateProto.getDescriptor(),
          com.google.protobuf.DescriptorProtos.getDescriptor(),
          com.google.protobuf.DurationProto.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_buf_validate_MessageConstraints_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_buf_validate_MessageConstraints_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_MessageConstraints_descriptor,
        new java.lang.String[] { "Disabled", "Cel", "Disabled", });
    internal_static_buf_validate_OneofConstraints_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_buf_validate_OneofConstraints_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_OneofConstraints_descriptor,
        new java.lang.String[] { "Required", "Required", });
    internal_static_buf_validate_FieldConstraints_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_buf_validate_FieldConstraints_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_FieldConstraints_descriptor,
        new java.lang.String[] { "Cel", "Skipped", "Required", "IgnoreEmpty", "Float", "Double", "Int32", "Int64", "Uint32", "Uint64", "Sint32", "Sint64", "Fixed32", "Fixed64", "Sfixed32", "Sfixed64", "Bool", "String", "Bytes", "Enum", "Repeated", "Map", "Any", "Duration", "Timestamp", "Type", });
    internal_static_buf_validate_FloatRules_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_buf_validate_FloatRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_FloatRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_DoubleRules_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_buf_validate_DoubleRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_DoubleRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_Int32Rules_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_buf_validate_Int32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_Int32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_Int64Rules_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_buf_validate_Int64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_Int64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_UInt32Rules_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_buf_validate_UInt32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_UInt32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_UInt64Rules_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_buf_validate_UInt64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_UInt64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_SInt32Rules_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_buf_validate_SInt32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_SInt32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_SInt64Rules_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_buf_validate_SInt64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_SInt64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_Fixed32Rules_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_buf_validate_Fixed32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_Fixed32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_Fixed64Rules_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_buf_validate_Fixed64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_Fixed64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_SFixed32Rules_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_buf_validate_SFixed32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_SFixed32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_SFixed64Rules_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_buf_validate_SFixed64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_SFixed64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_BoolRules_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_buf_validate_BoolRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_BoolRules_descriptor,
        new java.lang.String[] { "Const", "Const", });
    internal_static_buf_validate_StringRules_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_buf_validate_StringRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_StringRules_descriptor,
        new java.lang.String[] { "Const", "Len", "MinLen", "MaxLen", "LenBytes", "MinBytes", "MaxBytes", "Pattern", "Prefix", "Suffix", "Contains", "NotContains", "In", "NotIn", "Email", "Hostname", "Ip", "Ipv4", "Ipv6", "Uri", "UriRef", "Address", "Uuid", "IpWithPrefixlen", "Ipv4WithPrefixlen", "Ipv6WithPrefixlen", "IpPrefix", "Ipv4Prefix", "Ipv6Prefix", "WellKnownRegex", "Strict", "WellKnown", "Const", "Len", "MinLen", "MaxLen", "LenBytes", "MinBytes", "MaxBytes", "Pattern", "Prefix", "Suffix", "Contains", "NotContains", "Strict", });
    internal_static_buf_validate_BytesRules_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_buf_validate_BytesRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_BytesRules_descriptor,
        new java.lang.String[] { "Const", "Len", "MinLen", "MaxLen", "Pattern", "Prefix", "Suffix", "Contains", "In", "NotIn", "Ip", "Ipv4", "Ipv6", "WellKnown", "Const", "Len", "MinLen", "MaxLen", "Pattern", "Prefix", "Suffix", "Contains", });
    internal_static_buf_validate_EnumRules_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_buf_validate_EnumRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_EnumRules_descriptor,
        new java.lang.String[] { "Const", "DefinedOnly", "In", "NotIn", "Const", "DefinedOnly", });
    internal_static_buf_validate_RepeatedRules_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_buf_validate_RepeatedRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_RepeatedRules_descriptor,
        new java.lang.String[] { "MinItems", "MaxItems", "Unique", "Items", "MinItems", "MaxItems", "Unique", "Items", });
    internal_static_buf_validate_MapRules_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_buf_validate_MapRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_MapRules_descriptor,
        new java.lang.String[] { "MinPairs", "MaxPairs", "Keys", "Values", "MinPairs", "MaxPairs", "Keys", "Values", });
    internal_static_buf_validate_AnyRules_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_buf_validate_AnyRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_AnyRules_descriptor,
        new java.lang.String[] { "In", "NotIn", });
    internal_static_buf_validate_DurationRules_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_buf_validate_DurationRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_DurationRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", "Const", });
    internal_static_buf_validate_TimestampRules_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_buf_validate_TimestampRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_TimestampRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "LtNow", "Gt", "Gte", "GtNow", "Within", "LessThan", "GreaterThan", "Const", "Within", });
    message.internalInit(descriptor.getExtensions().get(0));
    oneof.internalInit(descriptor.getExtensions().get(1));
    field.internalInit(descriptor.getExtensions().get(2));
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(build.buf.validate.priv.PrivateProto.field);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    build.buf.validate.ExpressionProto.getDescriptor();
    build.buf.validate.priv.PrivateProto.getDescriptor();
    com.google.protobuf.DescriptorProtos.getDescriptor();
    com.google.protobuf.DurationProto.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
